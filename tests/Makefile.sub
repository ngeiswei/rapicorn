# Rapicorn			- non-recursive Makefile
#

# == t201-rcore-basics ==
noinst_PROGRAMS			       += tests/t201-rcore-basics
tests_t201_rcore_basics_LDADD		= ui/librapicorn-@MAJOR@.la $(RAPICORN_GUI_LIBS)
tests_t201_rcore_basics_SOURCES		=	\
	tests/t201-rcore-basics-main.cc		\
	tests/t201-rcore-basics-aidatests.cc	\
	tests/t201-rcore-basics-markup.cc	\
	tests/t201-rcore-basics-strings.cc	\
	tests/t201-rcore-basics-timebits.cc	\
	tests/t201-rcore-basics-datalist.cc	\
	tests/t201-rcore-basics-loops.cc
tests/t201-rcore-basics-markup.cc: tests/t201-rcore-basics-xmldata.cc

# == t201-rcore-basics-test ==
t201-rcore-basics-test: tests/t201-rcore-basics
	$(Q) cd tests && $(abs_top_srcdir)/taptool.sh --test-name t201-rcore-basics -- ./t201-rcore-basics
.PHONY: t201-rcore-basics-test
check-local: t201-rcore-basics-test

# == t202-randomized-hashing ==
t202-randomized-hashing-test: tests/t201-rcore-basics	# test hash reseeding at program start
	$(Q) test `tests/t201-rcore-basics --string-hash64 foo` != `tests/t201-rcore-basics --string-hash64 foo` ; $(TSTRESULT)
.PHONY: t202-randomized-hashing-test
check-local: t202-randomized-hashing-test

# == t203-more-basics ==
noinst_PROGRAMS				+= tests/t203-more-basics
tests_t203_more_basics_LDADD		 = ui/librapicorn-@MAJOR@.la $(SVG_DEPENDENCIES_LIBS)
tests_t203_more_basics_SOURCES		 = 	\
	tests/t203-more-basics-main.cc		\
	tests/t203-more-basics-performance.cc	\
	tests/t203-more-basics-signal2.cc	\
	tests/t203-more-basics-svgtool.cc	\
	tests/t203-more-basics-threads.cc	\
	tests/t203-more-basics-xmltest.cc
tests/t203-more-basics-xmltest.cc: tests/t201-rcore-basics-xmldata.cc

# == t203-more-basics-test ==
t203-more-basics-test: tests/t203-more-basics
	$(Q) cd tests && $(abs_top_srcdir)/taptool.sh --test-name t203-more-basics -- ./t203-more-basics
.PHONY: t203-more-basics-test
check-local: t203-more-basics-test

# == t204-assertions ==
t204-assertions-test: tests/t203-more-basics # validate failing assertions and fatal aborting
	$(Q) rm -f $(TSTOUT)
	$(Q) (! $(tests_t204_assertions_env) tests/t203-more-basics --test-assertion-hook	2>$(TSTOUT)) $(QSTDERR) && \
	     grep -q 'assertion-hook.*magic=0xdecaff'	$(TSTOUT) ; $(TSTRESULT) "check Test::set_assertion_hook()"
	$(Q) (! $(tests_t204_assertions_env) tests/t203-more-basics --test-critical		2>$(TSTOUT)) $(QSTDERR) && \
	     grep -q 'test-critical-message'		$(TSTOUT) ; $(TSTRESULT) "verify critical message"
	$(Q) (! $(tests_t204_assertions_env) tests/t203-more-basics --test-assert		2>$(TSTOUT)) $(QSTDERR) && \
	     grep -q 'failed.*"test-assert"'		$(TSTOUT) ; $(TSTRESULT) "verify failing assert"
	$(Q) (! $(tests_t204_assertions_env) tests/t203-more-basics --test-unreached		2>$(TSTOUT)) $(QSTDERR) && \
	     grep -q 'FATAL:.*not.*reach'		$(TSTOUT) ; $(TSTRESULT) "verify failing unreached"
	$(Q) (! $(tests_t204_assertions_env) tests/t203-more-basics --test-TASSERT		2>$(TSTOUT)) $(QSTDERR) && \
	     grep -q 'assert.*fail.*".*TASSERT"'	$(TSTOUT) ; $(TSTRESULT) "verify failing TASSERT()"
	$(Q) (! $(tests_t204_assertions_env) tests/t203-more-basics --test-TCMP			2>$(TSTOUT)) $(QSTDERR) && \
	     grep -q 'assert.*fail.*".*TCMP"'		$(TSTOUT) ; $(TSTRESULT) "verify failing TCMP()"
	$(Q) (! $(tests_t204_assertions_env) tests/t203-more-basics --test-fatal		2>$(TSTOUT)) $(QSTDERR) && \
	     grep -q 'FATAL:.*fatal.*"test-fatal"'	$(TSTOUT) ; $(TSTRESULT) "verify fatal error"
	$(Q) grep -qi 'Aborting..'			$(TSTOUT) ; $(TSTRESULT) "verify aborting"
	$(Q) rm -f $(TSTOUT) && eval "$$TSTDIAGNOSE"
tests_t204_assertions_env = RAPICORN=debug:no-syslog:no-fatal-syslog
.PHONY: t204-assertions-test
check-local: t204-assertions-test
