// Licensed CC0 Public Domain: http://creativecommons.org/publicdomain/zero/1.0
// IDL test file				        -*-mode:c++;-*-

// single line comment

/* multi line comment on single line */

/* multi line comment with embedded single line slashes //
// still in multi line comment
// */

;;;;;;;	// multi semicolon test

namespace EmptyNamespace1 { }

namespace EmptyNamespace2 {
;;;;;;;	// multi semicolon in namespace test
}

namespace MandatoryNamespace {

// simple constant tests
Const S = "string";
Const S2 = "concatenated" "string";
Const A = 1 + 3 * 5 + 2 ** 3 % 11 + 1.5;	// 25.5
// reassignment: Const A = 1;
// invalid: Const TRUE = 17;
Const B = A**3;					// 16581.375
Const C = 5;
Const D = (5);
Const E = 5 * (3 + 4);                          // 35
Const F = 5 * 3 + 4;                            // 19
Const G = (5 * 3 + 4);                          // 19
Const Signs = +1 + -2 + - -3 - +-+-+-+-+- 4;    // 6
Const Pows = 1**1 - -1**1 + 1**-1 - -1**-1 - -(1 + 1)**-(1 + 1) + +1**+1;
Const Floats = 0 + 0. + .0 + 1. + 10. + .011 + 101. + 1.1e+1 + .1e+1 + 1e-1 + 1E+1 + 1E-1 + 1e+01 + 1e-02; // 144.221
Const Float2 = 1 + 2.2 + .3 + 1e7 + 1E7 + 2.2e6 + 2.2E6 + .3e123 + .3E123;
Const Bools = TRUE + True + true + FALSE + False + false + 0 + 1; // 4
Const Vint = 42;

/* test that C++ style commments are properly ignored within strings */
Const CXX_COMMENT_TEST_1 = "Foo // bar";
Const CXX_COMMENT_TEST_2 = "Foo \" // bar";
Const CXX_COMMENT_TEST_3 = "Foo \\";//bar
Const CXX_COMMENT_TEST_4 = "Foo /**/ bar";
Const CXX_COMMENT_TEST_5 = "Foo /*//*/ bar";
Const CXX_COMMENT_TEST_6 = "Foo /* */ */ bar";
Const CXX_COMMENT_TEST_7 = "Foo /* /* /* bar";
Const CXX_COMMENT_TEST_8 = "Foo /* /* */ /* bar";
Const String1 = "1";
Const String2 = "2";
Const String3 = "first" "+" "second";
Const String4 = "" String1 "+" String2;
Const Vistring = _("foo");
// Const tmp = "" Vistring "error: i18n string concatenation";
Const Vstring = "foo";

// enumerations
// enumeration Empty  { };
enumeration Enum1  { E1_A };
enumeration Enum1c { E1C_A, };
enumeration Enum2  { E2_A,  E2_B };
enumeration Enum2c { E2C_A, E2C_B, };
enumeration Enum3  { E3_A,  E3_B,  E3_C };
enumeration Enum3c { E3C_A, E3C_B, E3C_C, };
enumeration Enum4a { E4A_A, E4A_B, E4A_C, E4A_D  /**/ };
enumeration Enum4b { E4B_A, E4B_B, E4B_C, E4B_D, /**/ };
enumeration Enum4c { E4C_A, E4C_B, E4C_C, E4C_D  //
                       };
enumeration Enum4d { E4D_A, E4D_B, E4D_C, E4D_D, //
                       };

// enumeration arguments
enum ExtensiveEnum {
  V1a,  // 1
  V1b =  1,
  V2  = Enum (2),
  V3  = Enum (3,   "v3"),
  V4  = Enum (4, _("v4")),
  V5  = Enum (5,   "v5",    "V5"),
  V6  = Enum (6, _("v6"),   "V6"),
  V7  = Enum (7,   "v7",  _("V7")),
  V8  = Enum (8, _("v8"), _("V8")),
  V9  = (((9))),
  /* check string expressions */
  V10 =    "v10",
  V11 =  _("v11"),
  V12 = Enum (  "v12"),
  V13,
  V14 = Enum (_("v14")),
  V15 = Enum (  "v15",    "V15"),
  V16 = Enum (_("v16"),   "V16"),
  V17 = Enum (  "v17",  _("V17")),
  V18 = Enum (_("v18"), _("V18")),
  /* check number parsing */
  V20 = 20,
  V21 = -(-20 - - + -1),
  V22 = 2 * 10 + 2,
  V23 = 2 * (5 + 5) + 3,
  V24 = 2 ** 4 + 8,
  V25 = -(2 ** 63),
  V26 = +(2 ** 63) - 1,
  V27 = +9223372036854775807,
  V28 = - /*comment*/ (28),
  /* constants */
  V30 = Vint,
  V31 = Vstring,
  V32 = Enum (Vint),
  V33 = Enum (Vstring),
  V34 = Enum (Vstring, Vstring),
  V35 = Enum (Vint, Vstring),
  V36 = Enum (Vint, Vstring, Vstring "4"),
};
// reassignment: Const V36 = 36;
Const enum_math = V36 + V34 + V24 + V13 + V3;

// simple interface
interface FirstInterface {
  void void_func ();
};

// record tests
record XFooRecord {
  bool   single_bool;
  int32    single_num;
  int64    num64;
  float64  single_float;
  String single_string;
  int32    sibling1;
  int32    sibling2;
  int32    multi1;
  int32    multi2;
  int32    multi3;
  int32    multi4;
  ExtensiveEnum enum_field;
  FirstInterface iface1;
  FirstInterface iface2;
  FirstInterface iface3;
  Any    any1;
  Any    any2;
  Any    any3;
};

// sequence tests
sequence XFooSequence {
  bool   single_bool;
};
sequence IntSequence {
  int32   numx;
};
sequence FloatSequence {
  float64 fractalvalue;
};
sequence StringSequence {
  String blurb;
};
sequence ExtensiveEnumSequence {
  ExtensiveEnum enum_elements;
};
sequence RecordSequence {
  XFooRecord repeatedfield;
};
sequence SequenceSequence {
  IntSequence moreints;
};
sequence InterfaceSequence {
  FirstInterface iface1;
};
sequence AnySequence {
  Any any_value;
};

// forward declarations
record NestedTypesRec;
sequence NestedTypesSeq;

// test nested types
record NestedTypesRec {
  XFooRecord    rec;
  XFooSequence  seq;
};
sequence NestedTypesSeq {
  NestedTypesRec ntr;
};

} // MandatoryNamespace

// Test namespace continuation
namespace MandatoryNamespace {
record NewRecord {
  int32            i;
  Enum1          enum1;
  XFooSequence   xfs;
  NestedTypesRec ntr;
};

// namespace nesting
namespace Inner {
record InnerRecord {
  int32           x;
  int32           y;
  NewRecord     rec;
};
} // Inner

record Refer2Inner {
  Inner::InnerRecord r;
};

} // MandatoryNamespace

// cross-namespace references
namespace OtherNamespace {
record SomeRecord {
  MandatoryNamespace::NewRecord            r1;
  ::MandatoryNamespace::NewRecord          r2;
  MandatoryNamespace::Inner::InnerRecord   r3;
  ::MandatoryNamespace::Inner::InnerRecord r4;
};
}

// references to outer namespaces
namespace Outer {
Const FromOuter = 3;
namespace Middle {
Const FromMiddle = 2;
namespace Inner {
Const FromInner = 1;
Const dummy = FromInner + FromMiddle + FromOuter;
} // Outer::Middle::Inner
} // Outer::Middle
} // Outer

// Auxdata tests
namespace Auxdata {

record RecordWithAuxdata {
  bool    aux_bool = Bool   ("AuxBool", "A Boolean", "rw");
  int32   aux32   = Num    ("Aux32", "The Bar number", "rw", 10007.000);
  int64   aux64   = Num    ("Aux64", "64bit auxillary number", "rw", 1152921504606846976);
  float64 auxf64  = Num    ("AuxF64", "X coordinate", "ro", 19e-3);
  String  aux_str  = String ("AuxStr", "Specify text here", "rw", "auxtest3");
  /* auxtest1 and auxtest2 are explicit testing keywords */
};
}

namespace InterfaceTests {
interface UIWidgetArea {
  bool  dummy;
  float64 simple_method ();
  float64 single_arg (int32 n);
  float64 single_arg2 (int32 n = 5);
  float64 two_args (int32 n, float64 r);
  float64 two_args2 (int32 n = 6, float64 r = 7.7);
  float64 multi_args (bool b, int64 n, float64 r, int32 i, String s = ("String ding"), float64 y = 5);
  float64 self_method (UIWidgetArea ba1, InterfaceTests::UIWidgetArea ba2);
  void void_method();
  /* sample property accessors: */
  String on_click2out ();
  void   on_click2in  (String command);
  /* property: */
  String on_click = String (_("On CLick"), _("Command on button1 click"), "rw");
  /* signals: */
  signal void void_signal ();
  signal float64 sample_signal (UIWidgetArea ba1, int32 someint);
  //bool check_activate (void) = signal (CollectUntil0);
  //void activate       (void);
};
interface Parent {};
interface Child : Parent {}; // interface inheritance
interface Descendant : Parent, Child {}; // multiple interface inheritance
interface GrandChild : Parent, Child, Descendant {}; // multiple interface inheritance

enum QuickEnum         { ZERO = 0, };
record   QuickRecord   { int32   int1; int32 int2; };
sequence QuickSequence { float64 somefloat; };

interface QuickIface {
  void simple_function (int32 i = 9);
};

interface MethodTestInterface {
  void           method_with_void       ();
  bool           method_with_bools      (bool   input, bool   optval = FALSE);
  int32          method_with_ints32     (int32    input, int32    optval = -3 - -1);
  int64          method_with_ints64     (int64    input, int64    optval = 576460752303423488);
  float64        method_with_floats     (float64  input, float64  optval = 9.9 + 3.e+2);
  String         method_with_string     (String input, String optval = "default");
  QuickEnum      method_with_enum       (QuickEnum      input, QuickEnum     optval = ZERO);
  QuickRecord    method_with_record     (QuickRecord    input, QuickRecord   optval = 0);
  QuickSequence  method_with_sequence   (QuickSequence  input, QuickSequence optval = 0);
  GrandChild     method_with_interface  (GrandChild     input, GrandChild    optval = 0);
  Any            method_with_anys       (Any            input, Any           optval);
  QuickIface     method_with_quickiface (QuickIface     input, QuickIface    iface0 = 0);
};

interface SignalTestInterface {
  signal void                void_result      ();
  signal bool                bool_result      ();
  signal int32               int32_result     ();
  signal int64               int64_result     ();
  signal float64             float64_result   ();
  signal String              string_result    ();
  signal QuickEnum           enum_result      ();
  signal QuickRecord         record_result    ();
  signal QuickSequence       sequence_result  ();
  signal GrandChild          interface_result ();
  signal Any                 any_result       ();
  signal SignalTestInterface self_result      ();
  signal void                void_arg         ();
  signal void                bool_arg         (bool b);
  signal void                int32_arg        (int32 i);
  signal void                int64_arg        (int64 i);
  signal void                float64_arg      (float64 f);
  signal void                string_arg       (String s);
  signal void                enum_arg         (QuickEnum e);
  signal void                record_arg       (QuickRecord r);
  signal void                sequence_arg     (QuickSequence s);
  signal void                interface_arg    (GrandChild i);
  signal void                any_arg          (Any a);
  signal void                self_args        (SignalTestInterface self_);
};

interface ChildInheritingSignals : SignalTestInterface {
  signal void child_signal (ChildInheritingSignals c, SignalTestInterface p, Any a, int32 i, QuickRecord r, QuickSequence s);
};

interface AnotherChild : SignalTestInterface {
};

interface PropertyTester {
  // void        void_prop;
  bool           bool_prop;
  int32          int32_prop;
  int64          int64_prop;
  float64        float64_prop;
  String         string_prop;
  QuickEnum      enum_prop;
  QuickRecord    record_prop;
  QuickSequence  sequence_prop;
  GrandChild     interface_prop;
  PropertyTester self_prop;
  Any            any_prop;
};

} // InterfaceTests

include "include-p1.idl"; // test includes

namespace RapicornAidaTest {

interface UseIncludes : IncludeCheck::SomeInterface {}; // verify includes

enum ClickType {
  CLICK_ON_PRESS        = 1,
  CLICK_ON_RELEASE,
  CLICK_SLOW_REPEAT,
  CLICK_FAST_REPEAT,
  CLICK_KEY_REPEAT,
};

interface ButtonArea // : public virtual Container, public virtual FocusFrame::Client
{
  signal bool check_activate ();
  signal void activate       ();
  // protected: explicit              ButtonArea();
  String        on_click;
  String        on_click2;
  String        on_click3;
  ClickType     click_type;
  // virtual const PropertyList&   list_properties ();
};

interface PureMethods; // interface prototyping

interface PureMethods {
  int32 pure_method (float64 f);
};

interface PureMethods; // interface prototyping

// math expression tests
enum MathExpressions {
  RESULT_2      = 1 + 1,
  RESULT_5      = 4 | 5,
  RESULT_8      = 15 & 8,
  RESULT_6      = 7 ^ 1,
  RESULT_7      = 6 ^ 1,
  RESULT_16     = 2 << 3,
  RESULT_3      = 13 >> 2,
  RESULT_24     = 3 << 2 + 1,
  RESULT_13     = ((3 << 2) + 1),
  RESULT_m2     = ~1,
  RESULT_77     = ~-78,
  RESULT_511    = 0x01ff,
};

} // RapicornAidaTest

namespace Other {
using namespace OtherNamespace; // for OtherNamespace::SomeRecord

interface NameTests {
  void args_from_other_namespace (InterfaceTests::QuickRecord qr, ::RapicornAidaTest::ClickType qe, SomeRecord sr);
};

} // Other

namespace U1 {
Const A = 7;
}
namespace U2 {
using namespace U1;
Const B = A + 1; // refer to U1::A
Const A = 17;    // new identifier in U2!
}

namespace BseTest {
interface Compressor {
  group _("Compatibility Settings") {
    float64 threshold    = Num ("", "", "w");
    float64 ratio        = Num ("", "", "w", 0);
  };
};

record RecordForGroups {
  group _("Normal") {
    int32 i;
    float64 ratio        = Num ("", "", "w", 0);
  };
  bool ordinary_bool;
  group _("compat") {
    float64 threshold1;
    float64 threshold2;
  };
};

interface SoundModule {
  IStream simple_input;
  JStream simple_multi;
  OStream simple_output;
  IStream input_stream = Stream ("Input Strem", "Stream for data input", "w");
  JStream multi_stream = Stream ("Multi Strem", "Stream for multiple data input", "w");
  OStream output_stream = Stream ("Output Strem", "Stream for data output", "r");
};

} // BseTest
