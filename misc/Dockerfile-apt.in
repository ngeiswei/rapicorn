# This Source Code Form is licensed MPL-2.0: http://mozilla.org/MPL/2.0

# Pick distribution to start from
FROM @DIST@
MAINTAINER Tim Janik <timj@gnu.org>

# Automation tools and convenience commands
ENV DEBIAN_FRONTEND noninteractive
RUN echo '#!/bin/bash\n"$@" || { sleep 10 ; "$@" ; } || { sleep 90 ; "$@" ; }' > /bin/retry && chmod +x /bin/retry && \
    echo '\n' \
    "\nalias ls='ls --color=auto' ; alias l='ls -al' ;" \
    "\nalias grep='grep --color=auto' ; alias fgrep='fgrep --color=auto' ; alias egrep='egrep --color=auto' ;" \
    '\nfunction regrep { (shopt -s globstar extglob; IFS=; set - ; /usr/bin/nice /bin/egrep --color=auto -d skip "") }' \
    | tee -a /etc/bash.bashrc >> /root/.bashrc

# Ensure uptodate distribution and access to the bintray.com repositories
ENV http_proxy "@http_proxy@"
RUN retry apt-get update && retry apt-get -y install apt-utils && retry apt-get -y upgrade && \
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 379CE192D401AB61

# ENV BEASTAPTSOURCE "@BEASTAPTSOURCE@"

# Provide build essentials and dependencies
RUN retry apt-get install -y \
    build-essential devscripts lintian automake autoconf autoconf-archive libtool intltool git xvfb \
    bison flex cython doxygen graphviz texlive-binaries pandoc libxml2-utils \
    librsvg2-dev libpango1.0-dev python2.7-dev libxml2-dev libreadline6-dev \
    libreadline-dev python-all-dev python-enum34

# Provide clang++ if needed
ENV INTENT "@INTENT@"
RUN [ $INTENT = clangbuild ] || exit 0 && \
    retry apt-get install -y clang

# Setup build environment and provide the git repository
ENV PROJECT	rapicorn
ENV EMAIL	rapicorn@googlegroups.com
COPY tmp-mirror.git /tmp/$PROJECT.git
RUN cd /usr/src/ && git clone /tmp/$PROJECT.git

# Build sources in project directory
WORKDIR /usr/src/$PROJECT

# Build sources, run tests and create distribution tarball
# Carry out distcheck test if desired
RUN [ $INTENT != clangbuild ] || exit 0 && \
    nice ./autogen.sh --prefix=/usr
RUN [ $INTENT = clangbuild ] || exit 0 && \
    nice ./autogen.sh --prefix=/usr CC=clang CXX=clang++
RUN nice make -j`nproc`
RUN nice make check
RUN nice make install
RUN nice make installcheck
RUN nice make dist
RUN nice make uninstall

# Carry out distcheck test if desired
RUN [ $INTENT = distcheck ] || exit 0 && \
    nice make distcheck

# Cleanup, show tarball
RUN nice make clean
RUN ls -l *.tar.xz

# Create deb packages as follows:
# Figure Debian version, this must have a distribution specific suffix for bintray uploads.
# Extract distribution from tarball, prepare debian source tarball, add debian/ directory,
# update Debian's 'changelog', install build tools, build Debian packages in /usr/src/.
ENV DISTRELEASE "@DISTRELEASE@"
ENV TRAVIS_JOB_NUMBER "@TRAVIS_JOB_NUMBER@"
RUN [ $INTENT = package ] || exit 0 && \
	TARBALL=`echo *.tar.xz` && \
	TARDIR=${TARBALL%.tar*} && \
	TARPACKAGE=${TARDIR%-*} && \
	TARVERSION=${TARDIR#*-} && \
	BUILDID=`misc/mkbuildid.sh -p` && \
	DEBVERSION=$BUILDID-0${DISTRELEASE:-local}${TRAVIS_JOB_NUMBER:+~travis${TRAVIS_JOB_NUMBER/*./}} && \
	DEB_TARBALL="$TARPACKAGE"_"${DEBVERSION%-*}.orig.tar.xz" && \
	COMMITID=`git rev-parse HEAD` && \
	CHANGELOGMSG="Development snapshot, git commit $COMMITID" && \
	cp $TARBALL ../$DEB_TARBALL && \
	cd ../ && \
	tar xf $DEB_TARBALL && \
	cd $TARDIR/ && cp -r ../$TARPACKAGE/debian/ . && \
	dch -v "$DEBVERSION" "$CHANGELOGMSG" && dch -r "" && cat debian/changelog && \
	retry apt-get -y install $(dpkg-checkbuilddeps 2>&1 | sed 's/.*: //') && \
	nice debuild -j`nproc` -rfakeroot -us -uc && \
	cd .. && ls -al

# Test package installation from /usr/src/ and removal locally
RUN [ $INTENT = package ] || exit 0 && \
    cd .. && \
    dpkg-scanpackages . /dev/null | gzip -9c > Packages.gz && \
    echo 'deb [trusted=yes] file:///usr/src ./' > /etc/apt/sources.list.d/usrsrc.list && \
    retry apt-get update && apt-get install -y rapicorn && \
    apt-get purge -y rapicorn && apt-get --purge -y autoremove

# nice -n19 docker build -t rapicorn .
# docker run -ti --rm rapicorn /bin/bash
