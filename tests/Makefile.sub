# Rapicorn			- non-recursive Makefile
#

# == t201-rcore-basics ==
noinst_PROGRAMS			       += tests/t201-rcore-basics
tests_t201_rcore_basics_LDADD		= ui/librapicorn-@MAJOR@.la $(RAPICORN_GUI_LIBS)
tests_t201_rcore_basics_SOURCES		=	\
	tests/t201-rcore-basics-main.cc		\
	tests/t201-rcore-basics-aidatests.cc	\
	tests/t201-rcore-basics-markup.cc	\
	tests/t201-rcore-basics-strings.cc	\
	tests/t201-rcore-basics-timebits.cc	\
	tests/t201-rcore-basics-datalist.cc	\
	tests/t201-rcore-basics-loops.cc
tests/t201-rcore-basics-markup.cc: tests/t201-rcore-basics-xmldata.cc

# == t201-rcore-basics-test ==
t201-rcore-basics-test: tests/t201-rcore-basics
	$(Q) cd tests && $(abs_top_srcdir)/taptool.sh --test-name t201-rcore-basics -- ./t201-rcore-basics
.PHONY: t201-rcore-basics-test
check-local: t201-rcore-basics-test

# == t202-randomized-hashing ==
t202-randomized-hashing-test: tests/t201-rcore-basics	# test hash reseeding at program start
	$(Q) test `tests/t201-rcore-basics --string-hash64 foo` != `tests/t201-rcore-basics --string-hash64 foo` ; $(TSTRESULT)
.PHONY: t202-randomized-hashing-test
check-local: t202-randomized-hashing-test

# == t203-more-basics ==
noinst_PROGRAMS				+= tests/t203-more-basics
tests_t203_more_basics_LDADD		 = ui/librapicorn-@MAJOR@.la $(SVG_DEPENDENCIES_LIBS)
tests_t203_more_basics_SOURCES		 = 	\
	tests/t203-more-basics-main.cc		\
	tests/t203-more-basics-performance.cc	\
	tests/t203-more-basics-signal2.cc	\
	tests/t203-more-basics-svgtool.cc	\
	tests/t203-more-basics-threads.cc	\
	tests/t203-more-basics-xmltest.cc
tests/t203-more-basics-xmltest.cc: tests/t201-rcore-basics-xmldata.cc

# == t203-more-basics-test ==
t203-more-basics-test: tests/t203-more-basics
	$(Q) cd tests && $(abs_top_srcdir)/taptool.sh --test-name t203-more-basics -- ./t203-more-basics
.PHONY: t203-more-basics-test
check-local: t203-more-basics-test

# == t204-assertions ==
t204-assertions-test: tests/t203-more-basics # validate failing assertions and fatal aborting
	$(Q) rm -f $(TSTOUT)
	$(Q) (! $(tests_t204_assertions_env) tests/t203-more-basics --test-assertion-hook	2>$(TSTOUT)) $(QSTDERR) && \
	     grep -q 'assertion-hook.*magic=0xdecaff'	$(TSTOUT) ; $(TSTRESULT) "check Test::set_assertion_hook()"
	$(Q) (! $(tests_t204_assertions_env) tests/t203-more-basics --test-critical		2>$(TSTOUT)) $(QSTDERR) && \
	     grep -q 'test-critical-message'		$(TSTOUT) ; $(TSTRESULT) "verify critical message"
	$(Q) (! $(tests_t204_assertions_env) tests/t203-more-basics --test-assert		2>$(TSTOUT)) $(QSTDERR) && \
	     grep -q 'failed.*"test-assert"'		$(TSTOUT) ; $(TSTRESULT) "verify failing assert"
	$(Q) (! $(tests_t204_assertions_env) tests/t203-more-basics --test-unreached		2>$(TSTOUT)) $(QSTDERR) && \
	     grep -q 'FATAL:.*not.*reach'		$(TSTOUT) ; $(TSTRESULT) "verify failing unreached"
	$(Q) (! $(tests_t204_assertions_env) tests/t203-more-basics --test-TASSERT		2>$(TSTOUT)) $(QSTDERR) && \
	     grep -q 'assert.*fail.*".*TASSERT"'	$(TSTOUT) ; $(TSTRESULT) "verify failing TASSERT()"
	$(Q) (! $(tests_t204_assertions_env) tests/t203-more-basics --test-TCMP			2>$(TSTOUT)) $(QSTDERR) && \
	     grep -q 'assert.*fail.*".*TCMP"'		$(TSTOUT) ; $(TSTRESULT) "verify failing TCMP()"
	$(Q) (! $(tests_t204_assertions_env) tests/t203-more-basics --test-fatal		2>$(TSTOUT)) $(QSTDERR) && \
	     grep -q 'FATAL:.*fatal.*"test-fatal"'	$(TSTOUT) ; $(TSTRESULT) "verify fatal error"
	$(Q) grep -qi 'Aborting..'			$(TSTOUT) ; $(TSTRESULT) "verify aborting"
	$(Q) rm -f $(TSTOUT) && eval "$$TSTDIAGNOSE"
tests_t204_assertions_env = RAPICORN=debug:no-syslog:no-fatal-syslog
.PHONY: t204-assertions-test
check-local: t204-assertions-test

# == t205-debug-output ==
t205-debug-output-test: tests/t203-more-basics # check various non-fatal logging conditions
	$(Q) rm -f $(TSTOUT)
	$(Q) $(tests_t205_debug_output_env) tests/t203-more-basics --test-logging	2>>$(TSTOUT)
	$(Q) grep -q 'debugging messages'             $(TSTOUT) ; $(TSTRESULT) "check debugging"
	$(Q) grep -q 'assertion failed: errno == 0'   $(TSTOUT) ; $(TSTRESULT) "check errno diagnostics"
	$(Q) grep -q 'failed.*"assert-return-void"'   $(TSTOUT) ; $(TSTRESULT) "check assert_return"
	$(Q) grep -q 'failed.*"assert-return+val"'    $(TSTOUT) ; $(TSTRESULT) "check assert_return+value"
	$(Q) grep -q 'CRITICAL:.*"test-critical"'     $(TSTOUT) ; $(TSTRESULT) "check test critical()"
	$(Q) eval "$$TSTDIAGNOSE"
	$(Q) rm -f $(TSTOUT)
tests_t205_debug_output_env = RAPICORN=no-syslog:no-fatal-syslog RAPICORN_DEBUG=all
.PHONY: t205-debug-output-test
check-local: t205-debug-output-test

# == t206-naive-entropy ==
t206-naive-entropy-test: tests/t901-bench-rcore
	$(Q) A=`tests/t901-bench-rcore --entropy` ; B=`tests/t901-bench-rcore --entropy`; \
	       test -n "$$A$$B" -a "$$A" != "$$B"; $(TSTRESULT) "naive startup entropy check"
	$(Q) A=`tests/t901-bench-rcore --system-entropy` ; B=`tests/t901-bench-rcore --system-entropy`; \
	       test -n "$$A$$B" -a "$$A" != "$$B"; $(TSTRESULT) "naive system entropy check"
	$(Q) A=`tests/t901-bench-rcore --runtime-entropy` ; B=`tests/t901-bench-rcore --runtime-entropy`; \
	       test -n "$$A$$B" -a "$$A" != "$$B"; $(TSTRESULT) "naive runtime entropy check"
	$(Q) eval "$$TSTDIAGNOSE"
.PHONY: t206-naive-entropy-test
check-local: t206-naive-entropy-test

# == t303-mini-server ==
noinst_PROGRAMS				+= tests/t303-mini-server
tests_t303_mini_server_LDADD		 = ui/librapicorn-@MAJOR@.la
tests_t303_mini_server_CXXFLAGS		 = $(AM_CXXFLAGS) -Itests/
tests_t303_mini_server_SOURCES		 =	\
	tests/t303-mini-server-main.cc
EXTRA_DIST				+=	\
	tests/t303-mini-server.idl		\
	tests/t303-mini-server-impl.cc
tests_t303_generated			 =	\
	tests/t303-mini-server-srvt.hh		\
	tests/t303-mini-server-srvt.cc		\
	tests/t303-mini-server-clnt.hh		\
	tests/t303-mini-server-clnt.cc
# MAKE(1) supports parallel execution of a multiple-targets-rule *only* for implicit rules (with '%')
tests/t303-%-clnt.hh tests/t303-%-clnt.cc tests/t303-%-srvt.hh tests/t303-%-srvt.cc: tests/t303-%.idl $(AIDACC_CXXSTUB_PY) $(AIDACC_INTERN)
	$(AM_V_GEN)
	$(Q) $(AIDACC_INTERN) -x CxxStub -G clienthh -G strip-path=$(abs_top_srcdir)/ $< -o tests/t303-$*-clnt.hh
	$(Q) $(AIDACC_INTERN) -x CxxStub -G clientcc -G strip-path=$(abs_top_srcdir)/ $< -o tests/t303-$*-clnt.cc
	$(Q) $(AIDACC_INTERN) -x CxxStub -G serverhh -G strip-path=$(abs_top_srcdir)/ $< -o tests/t303-$*-srvt.hh
	$(Q) $(AIDACC_INTERN) -x CxxStub -G servercc -G strip-path=$(abs_top_srcdir)/ $< -o tests/t303-$*-srvt.cc
CLEANFILES += $(tests_t303_generated)
tests/t303-mini-server-main.cc: $(tests_t303_generated)

# == t303-mini-server-test ==
t303-mini-server-test: tests/t303-mini-server
	$(Q) tests/t303-mini-server ; eval "$$TSTDIAGNOSE"
.PHONY: t303-mini-server-test
check-local: t303-mini-server-test

# == t5xx - make_check_pytests ==
make_check_pytests += \
	tests/t500-main-loop.py		\
	tests/t501-simple-click.py	\
	tests/t502-property-basics.py	\
	tests/t503-garbage-collector.py	\
	tests/t504-size-groups.py	\
	tests/t505-property-binding.py

# == t600-xmlui-eval ==
make_check_xml_files += tests/t600-xmlui-eval.xml
t600-xmlui-eval-test: tests/t600-xmlui-eval.xml
	$(Q) $(XVFB_RAPIDRUN) -x $(srcdir)/tests/t600-xmlui-eval.xml ; eval "$$TSTDIAGNOSE"
.PHONY: t600-xmlui-eval-test
check-local: t600-xmlui-eval-test

# == t601-arrow-sizing ==
make_check_xml_files += tests/t601-arrow-sizing.xml
t601-arrow-sizing-test: tests/t601-arrow-sizing.xml
	$(Q) $(XVFB_RAPIDRUN) -x $(srcdir)/tests/t601-arrow-sizing.xml ; eval "$$TSTDIAGNOSE"
.PHONY: t601-arrow-sizing-test
check-local: t601-arrow-sizing-test


# == t901-bench-rcore ==
noinst_PROGRAMS				+= tests/t901-bench-rcore
tests_t901_bench_rcore_LDADD		 = ui/librapicorn-@MAJOR@.la
tests_t901_bench_rcore_SOURCES		 = \
	tests/t901-bench-rcore-main.cc
t901-bench-rcore-test: tests/t901-bench-rcore
	$(Q) cd tests && $(abs_top_srcdir)/taptool.sh --test-name t901-bench-rcore -- ./t901-bench-rcore
.PHONY: t901-bench-rcore-test
check-local: t901-bench-rcore-test
