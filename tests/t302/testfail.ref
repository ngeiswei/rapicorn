.../testfail.idl:5:26: NameError: redefining identifier: a
>  Const a = 5; Const a = 6; // redefining existing identifier
>                           ^
.../testfail.idl:7:18: NameError: redefining keyword: record
>  Const record = 5; // keyword assignment
>                   ^
.../testfail.idl:11:22: NameError: invalid characters in namespace: broken$name
>  namespace broken$name { Const a = 5; } // invalid namespace name (without --system-typedefs)
>                       ^
.../testfail.idl:13:31: NameError: redefining identifier: E
>  enum E { VALUE }; Const E = 0; // typename assignment
>                                ^
.../testfail.idl:15:35: NameError: redefining identifier: VALUE
>  enum E { VALUE }; Const VALUE = 0; // enum value assignment
>                                    ^
.../testfail.idl:17:17: NameError: redefining keyword: TRUE
>  Const TRUE = 17; // invalid constant name
>                  ^
.../testfail.idl:19:24: Trying to find ';': STRING, IDENT, '\)', '_', '\*\*', '\*', '/', '%', '\+', '-', '<<', '>>', '&', '\^', '\|', ';', ',', '}', got '_'
>  Const tmp = "invalid" _("i18n string") "concatenation";
>                         ^
.../testfail.idl:21:1: Trying to find one of ...
>  FrobCheck tmp = 1; // FrobCheck is no type
>  ^
.../testfail.idl:23:16: Trying to find one of ...
>  Const zzz = 1; zzz tmp = 1; // zzz is no type
>                 ^
.../testfail.idl:25:27: Trying to find one of ...
>  record DupRecord { int32 a, b, c; }; // fail on multiple fields per type
>                            ^
.../testfail.idl:27:40: NameError: duplicate field name: b
>  record DupRecord { int32 b; int32 b; }; // duplicate: b
>                                         ^
.../testfail.idl:29:22: Trying to find one of ...
>  record EmptyRecord { }; // record is empty
>                       ^
.../testfail.idl:31:28: NameError: expected identifier, not keyword: record
>  enum ExtensiveEnum { record, }; // keyword as enum value
>                             ^
.../testfail.idl:33:25: Trying to find one of ...
>  enum ExtensiveEnum { Foo; }; // semicolon in enum
>                          ^
.../testfail.idl:35:37: NameError: redefining enum member: EV1
>  enum ExtensiveEnum { EV1, EV2, EV1 }; // duplicate enum value
>                                      ^
.../testfail.idl:37:21: NameError: redefining enum member: AA
>  enum Enu1 { AA, AA }; // duplicate enum value
>                      ^
.../testfail.idl:39:35: NameError: redefining identifier: Enu1
>  enum Enu1 { AA }; enum Enu1 { BB }; // duplicate enum name
>                                    ^
.../testfail.idl:41:27: NameError: expected identifier, not keyword: Const
>  enum ExtensiveEnum { Const }; // Const keyword in enum
>                            ^
.../testfail.idl:43:26: Trying to find one of ...
>  sequence EmptySequence { }; // sequence needs 1 field
>                           ^
.../testfail.idl:45:41: Trying to find one of ...
>  sequence MultiFieldSequence { bool one; int32 toomany; }; // sequence needs 1 field
>                                          ^
.../testfail.idl:47:22: TypeError: unknown type: 'enum'
>  sequence Seq { enum b; }; // keyword is not typename
>                       ^
.../testfail.idl:49:45: TypeError: unknown type: '_S1'
>  sequence S1 { bool b; }; sequence S2 { _S1 s; }; // need existing typenames
>                                              ^
.../testfail.idl:51:52: NameError: redefining identifier: Dup
>  sequence Dup { bool b; }; sequence Dup { bool b; }; // duplicate definition
>                                                     ^
.../testfail.idl:57:17: NameError: redefining keyword: class
>  Const class = 5; // keyword redefinition
>                  ^
.../testfail.idl:59:35: NameError: redefining identifier: Enu1
>  enum Enu1 { AA }; enum Enu1 { AA }; // type redefinition
>                                    ^
.../testfail.idl:67: invalid type definition: = Num ("x", "X coord", 0, 0, 100.0, 0.5, "ro")
.../testfail.idl:69:29: Trying to find one of ...
>  interface I { int32 method (,); }; // invalid method arg separator
>                              ^
.../testfail.idl:70:51: NameError: duplicate member name: method
>  interface I { int32 method (); int32 method (); }; // multiple method definitions
>                                                    ^
.../testfail.idl:71:42: NameError: duplicate member name: xxx
>  interface I { int32 xxx; int32 xxx (); }; // multiple member definitions
>                                           ^
.../testfail.idl:72:50: NameError: duplicate method arg name: method (...n...)
>  interface I { int32 method (int32 n, int32 n); }; // duplicate method argument
>                                                   ^
.../testfail.idl:73:24: TypeError: unknown type: 'Unknown'
>  interface I : Unknown {}; // invalid parent interface
>                         ^
.../testfail.idl:74:42: TypeError: no such interface type: R
>  record R { String s; }; interface I : R {}; // invalid interface inheritance
>                                           ^
.../testfail.idl:75:32: TypeError: non-method invalidly declared as 'signal': xxx
>  interface I { signal int32 xxx; }; // invalidly declared as signal
>                                 ^
.../testfail.idl:76:17: NameError: redefining keyword: void
>  Const void = 17; // invalid constant name
>                  ^
.../testfail.idl:77:1: Trying to find one of ...
>  void xy = 17; // invalid property type
>  ^
.../testfail.idl:78:33: Trying to find one of ...
>  interface I { int32 method (void); }; // invalid argument type
>                                  ^
.../testfail.idl:79:44: TypeError: unknown type: 'void'
>  interface I { int32 method (int32 n, void v); }; // invalid argument type
>                                             ^
.../include-f2.idl:2:3: Trying to find one of ...
>    unexisting_var var;
>    ^
.../include-f1.idl:1: note: included "include-f2.idl" from here
.../testfail.idl:81: note: included "include-f1.idl" from here
.../testfail.idl:83:59: NameError: redefining identifier: E
>  namespace B { enum E { E1 }; } namespace B { enum E { E1 }; } // namespaced type redefinition
>                                                            ^
.../testfail.idl:85:73: NameError: redefining identifier: E
>  ...espace B { enum E { E1 }; } namespace B { enum E { E1 }; } } // namespaced type redefinition
>                                                            ^
.../testfail.idl:87:35: NameError: expected identifier, not keyword: self
>  interface I { int32 method (I self); }; // invalid method arg name
>                                    ^
.../testfail.idl:89:25: NameError: expected identifier, not keyword: self
>  interface I { int32 self; }; // invalid property name
>                          ^
.../testfail.idl:90:63: AttributeError: missing subsequent default initializer: method (...c...)
>  ...I { int32 method (int32 a, int32 b = 2, int32 c); }; // missing subsequent default initializer
>                                                         ^
.../testfail.idl:93:30: TypeError: unknown type: 'void'
>  interface P { void void_prop; }; // invalid property type
>                               ^
.../testfail.idl:95:56: NameError: redefining identifier: I
>  interface I; interface I {}; interface I; interface I {}; // interface redefinition
>                                                         ^
.../testfail.idl:97:15: AttributeError: invalid empty enumeration: Empty
>  enum Empty { }; // invalid empty enumeration
>                ^
.../testfail.idl:99:39: NameError: not a namespace-name: Unknown
>  namespace U { using namespace Unknown; } // not a namespace-name
>                                        ^
.../testfail.idl:101:38: TypeError: stream type used in wrong context: IStream stream_func1
>  interface I { IStream stream_func1(); }; // stream type used in wrong context
>                                       ^
.../testfail.idl:102:44: TypeError: stream type used in wrong context: JStream js
>  interface I { void stream_func2 (JStream js); }; // stream type used in wrong context
>                                             ^
.../testfail.idl:103:55: TypeError: stream type used in wrong context: OStream os
>  interface I { void stream_func3 (int32 i32, OStream os); }; // stream type used in wrong context
>                                                        ^
.../testfail.idl:104:47: TypeError: stream type used in wrong context: JStream stream_signal1
>  interface I { signal JStream stream_signal1(); }; // stream type used in wrong context
>                                                ^
.../testfail.idl:105:64: TypeError: stream type used in wrong context: OStream os
>  ...I { signal void stream_signal2 (float64 f, OStream os); }; // stream type used in wrong context
>                                                          ^
.../testfail.idl:106:27: TypeError: stream type used in wrong context: OStream istream
>  record I { OStream istream; }; // stream type used in wrong context
>                            ^
.../testfail.idl:107:29: TypeError: stream type used in wrong context: IStream istream
>  sequence S { IStream istream; }; // stream type used in wrong context
>                              ^
.../testfail.idl:109:45: Exception: Enum value out of range: -9223372036854775809
>  enum TooBig { VALUE = -9223372036854775809 }; // number too large
>                                              ^
.../testfail.idl:110:45: Exception: Enum value out of range: 9223372036854775808
>  enum TooBig { VALUE = +9223372036854775808 }; // number too large
>                                              ^
.../testfail.idl:112:22: NameError: expected identifier, not keyword: type
>  record R { int32 type; }; // invalid field name
>                       ^
