// This Source Code Form is licensed MPL-2.0: http://mozilla.org/MPL/2.0

/**
 * @file
 * @brief Rapicorn user interface API classes.
 */

namespace Rapicorn {

Const MAXINT32   = +4294967295;
Const MAXINT31   = +2147483647;
Const MININT31   = -2147483648;
Const MAXINT16   = +65535;
Const MAXINT15   = +32767;
Const MAXFLOAT64 = 1.7976931348623157e+308;

/// Enum used to specify how adjustments are picked from Widget ancestry.
enum AdjustmentSourceType {
  NONE = 0,
  ANCESTRY_HORIZONTAL,
  ANCESTRY_VERTICAL,
  ANCESTRY_VALUE
};

/// Enum generally used for text paragraph alignments.
enum Align  {
  LEFT = 1,
  CENTER,
  RIGHT,
};

/// Enum to specify an anchoring point for graphical elements.
enum Anchor {
  NONE = 0,
  CENTER,
  EAST,
  NORTH_EAST,
  NORTH,
  NORTH_WEST,
  WEST,
  SOUTH_WEST,
  SOUTH,
  SOUTH_EAST,
};

/// Enum to specify button click behaviour.
enum Click {
  ON_PRESS = 1,
  ON_RELEASE,
  SLOW_REPEAT,
  FAST_REPEAT,
  KEY_REPEAT,
};

/// Enum used to index various predefined colors.
enum StyleColor {
  NONE = 0,
  FOREGROUND,
  BACKGROUND,
  BACKGROUND_EVEN,
  BACKGROUND_ODD,
  FOCUS_COLOR,
  LIGHT,
  DARK,
  LIGHT_CLINCH,
  DARK_CLINCH,
  MARK,
};

/// Enum type for directional elements like arrows.
enum Direction {
  NONE = 0,
  RIGHT,
  UP,
  LEFT,
  DOWN,
};

/// Enum type for text ellipsization.
enum Ellipsize {
  START = 1,
  MIDDLE,
  END
};

/// Enum values used to navigate the focus chain.
enum FocusDir {
  NONE = 0,
  NEXT,
  PREV,
  RIGHT,
  UP,
  LEFT,
  DOWN
};

/// Enum type to discriminate various Frame widget types.
enum DrawFrame {
  NONE = 0,
  BACKGROUND,
  IN,
  OUT,
  ETCHED_IN,
  ETCHED_OUT,
  FOCUS,
  ALERT_FOCUS,
};

/// Enum with various lighting types.
flags enum Lighting {
  NONE = 0,
  UPPER_LEFT,
  UPPER_RIGHT,
  LOWER_LEFT,
  LOWER_RIGHT,
  CENTER,
  DIFFUSE,
  DARK_FLAG         = 0x80,
  DARK_UPPER_LEFT   = DARK_FLAG | UPPER_LEFT,
  DARK_UPPER_RIGHT  = DARK_FLAG | UPPER_RIGHT,
  DARK_LOWER_LEFT   = DARK_FLAG | LOWER_LEFT,
  DARK_LOWER_RIGHT  = DARK_FLAG | LOWER_RIGHT,
  DARK_CENTER       = DARK_FLAG | CENTER,
  DARK_DIFFUSE      = DARK_FLAG | DIFFUSE,
};

/// Enum type for list widget selection behaviour.
enum SelectionMode {
  NONE = 0,   ///< No selection possible
  SINGLE,     ///< Allow selection toggling of a single widget
  BROWSE,     ///< Browse by always forcing a single selected widget
  MULTIPLE,   ///< Allow arbitrary combinations of selected widgets
};

/// Enum policy type for sizing trade offs.
enum SizePolicy {
  NORMAL = 0,
  WIDTH_FROM_HEIGHT,
  HEIGHT_FROM_WIDTH,
};

/// Flags indicating Widget states, all flags propagate from ancestors to children.
flags enum WidgetState {
  NORMAL        = 0,       ///< Widget factory / initial state.
  STATE1        = 1 <<  0,
  ACCELERATABLE = 1 <<  1, ///< Widget participates in mnemonic activation.
  HOVER         = 1 <<  2, ///< A pointing device (e.g. mouse) is above the Widget.
  STATE2        = 1 <<  3,
  PANEL         = 1 <<  4, ///< Widget is rendered as part of a panel section.
  DEFAULT       = 1 <<  5, ///< Widget receives the default activation.
  SELECTED      = 1 <<  6, ///< Widget is currently selected.
  FOCUSED       = 1 <<  7, ///< Indicates if widget is (in the ancestry of) the focus widget.
  INSENSITIVE   = 1 <<  8, ///< Widget cannot process input events.
  STATE3        = 1 <<  9,
  ACTIVE        = 1 << 10, ///< Widget and its children are active or pressed.
  STATE4        = 1 << 11,
  TOGGLED       = 1 << 12, ///< Widget is in an alternative switchable state.
  RETAINED      = 1 << 13, ///< Widget alternative state is unspecified.
  STATE6        = 1 << 14,
  STASHED       = 1 << 15, ///< Widget is not viewable, it is concealed (taken offscreen) by an ancestor.
};

/// Enum type to discriminate various toplevel Window types.
enum WindowType {
  NORMAL = 0,       ///< Normal window
  DESKTOP,          ///< Desktop background
  DOCK,             ///< Dock or panel
  TOOLBAR,          ///< Torn-off toolbar
  MENU,             ///< Torn-off menu
  UTILITY,          ///< Palette or toolbox
  SPLASH,           ///< Startup/splash screen
  DIALOG,           ///< Dialog window, usually transient
  DROPDOWN_MENU,    ///< Menu, opened from menubar
  POPUP_MENU,       ///< Menu, opened as context menu
  TOOLTIP,          ///< Transient context info window
  NOTIFICATION,     ///< Transient info window (e.g. info bubble)
  COMBO,            ///< Combo box menu or list window
  DND,              ///< Window for dragged during DND operations
};

/// A sequence of booleans.
sequence BoolSeq { bool bools; };

/// A sequence of strings (in C++ of std::string).
sequence StringSeq { String strings; };

/** A sequence of @a Any objects.
 * An AnySeq is useful when the sequence element types need to be determined at runtime.
 */
sequence AnySeq { Any vany; };

/// A sequence of AnySeq sequence objects, useful when multiple AnySeq instances are needed.
sequence AnySeqSeq { AnySeq seq; };

/// A sequence of ARGB pixel values.
sequence PixelSeq { int32 argb; };

/** Pixbuf is a simple pixel buffer.
 * See Pixmap and PixmapT<> for convenient pixel based image manipulation.
 */
record Pixbuf {
  int32     row_length;         ///< Length of a Pixbuf row in pixels.
  PixelSeq  pixels;             ///< Pixel values in 32Bit ARGB format.
  StringSeq variables;
};

/// Base class for all interface types.
interface Object {};

/// BinadbleRelay - A server side relay to provide the BindableIface API for client objects to servants.
interface BindableRelay : Object {
  signal void relay_set  (String bpath, int64 nonce, Any value);   ///< Signal to request setting of a property.
  signal void relay_get  (String bpath, int64 nonce);              ///< Signal to request getting of a property.
  signal void relay_list (String bpath, int64 nonce);              ///< Signal to request listing of property names.
  void report_notify     (String bpath);                           ///< Notify about changes of a property.
  void report_result (int64 nonce, Any result, String error);      ///< Function to report set/get/list results.
};

/// Classification for element update request messages.
enum UpdateKind {
  READ,                  ///< Indicates an element range read request.
  CHANGE,                ///< Indicates element range changes.
  INSERTION,             ///< Indicates element range insertions.
  DELETION               ///< Indicates deletion of a range of elements.
};

/** Structure identifying an index span.
 * Specification of a span with start position and extent length.
 * The upper bound is retrieved by start + length.
 */
record UpdateSpan {
  int32 start;                  ///< Start of the span.
  int32 length;                 ///< Length of the span.
};

/** Structure describing an update for a list or table.
 * An update request specifies the kind of update, the element ranges affected and optional context variables.
 */
record UpdateRequest {
  UpdateKind kind;              ///< Classifies the update request type.
  UpdateSpan rowspan;           ///< List of rows affected.
  UpdateSpan colspan;           ///< List of columns affected.
  StringSeq  variables;         ///< Optional "key=UTF-8 string" pairs to provide auxillary information.
  Any        value;             ///< Row or cell value newly inserted, possibly sequences thereof.
};

/** A row-oriented data provider.
 * The ListModel interface serves as a row-oriented data provider for list views.
 * For many model implementations, in-order read outs should be of complexity O(1),
 * while random order read outs may be of O(log n) or even O(n).
 */
interface ListModel : Object {
  int32       count   ();    		        ///< Obtain the number of rows provided by this model.
  Any         row     (int32 index);            ///< Read-out row at @a index. In-order read outs are generally fastest.
  signal void updated (UpdateRequest urequest); ///< Notify about row insertions, changes and deletions.
};

/** Adapter for ListModel classes.
 * A ListModelRelay is an adapter that provides a push-API for ListModel classes.
 * This allows use of a ListModel in for example a list view, while the data to
 * be displayed is provided sparsely on demand through explicit API calls.
 */
interface ListModelRelay : Object {
  ListModel   model  ();                              ///< Obtain the ListModel, bundled with this relay, to which all data is relayed.
  void        fill   (int32 first, AnySeq asq);       ///< Provide row data as requested by refill().
  signal void refill (UpdateRequest urequest);        ///< Refill requests row data for bound-first rows.
  void        update (UpdateRequest urequest);        ///< Issue model notification for row change, insertion and deletion.
};

/// Requisition information, providing requisition @a width and @a height.
record Requisition {
  int32 width;  ///< Requested width.
  int32 height; ///< Requested height.
};

interface Widget;

/// A sequence of Widget objects.
sequence WidgetSeq { Widget  widgets; };

/// Widget is the base type for all UI elements.
/// See also the corresponding implementation class WidgetImpl.
interface Widget : Object {
  String id               = String (_("ID"), _("Widget identifier, useful in selector matches"), "rw");
  bool   acceleratable    = Bool (_("Acceleratable"), _("Whether this widget has an activatable mnemonic"), "rw");
  bool   hover            = Bool (_("Hover"), _("Whether this widget currently contains a pointing device"), "rw");
  bool   panel            = Bool (_("Panel"), _("Whether this widget is rendered as part of a panel section"), "rw");
  bool   receives_default = Bool (_("Receives Default"), _("Whether this widget receives default activation"), "rw");
  bool   selected         = Bool (_("Selected"), _("Whether this widget is currently selected"), "rw");
  bool   focused          = Bool (_("Focused"), _("Whether this widget is (in the ancestry of) the focus widget"), "r");
  bool   insensitive      = Bool (_("Insensitive"), _("Whether this widget is insensitive (not receives events)"), "rw");
  bool   active           = Bool (_("Active"), _("Whether this widget is currently active (e.g. depressed)"), "rw");
  bool   toggled          = Bool (_("Toggled"), _("Whether this widget is in a toggled (alternative) state"), "rw");
  bool   retained         = Bool (_("Retained"), _("Whether this widgets toggled state is unspecified"), "rw");
  bool   stashed          = Bool (_("Stashed"), _("Whether this widget is stashed, hidden by its container"), "r");
  bool   visible          = Bool (_("Visible"),   _("Whether this widget is visible"), "rw");
  bool   allow_focus      = Bool (_("Allow Focus"), _("Whether this widget may receive input focus"), "rw");
  /// @name User Sizes and Size Groups
  String  hsize_group = String (_("Horizontal Size Group"), _("Group name for widgets requesting the same horizontal size"), "rw");
  String  vsize_group = String (_("Vertical Size Group"), _("Group name for widgets requesting the same vertical size"), "rw");
  int32   width  = Range (_("Requested Width"),  _("The width to request from its container for this widget, -1=automatic"),  "rw", -1, MAXINT15);
  int32   height = Range (_("Requested Height"), _("The height to request from its container for this widget, -1=automatic"), "rw", -1, MAXINT15);
  Requisition requisition ();                   ///< Get the current effective size requisition
  /// @name Widget Packing Properties
  bool    hexpand = Bool (_("Horizontal Expand"), _("Whether to expand this widget horizontally"), "rw");
  bool    vexpand = Bool (_("Vertical Expand"),   _("Whether to expand this widget vertically"), "rw");
  bool    hspread = Bool (_("Horizontal Spread"), _("Whether to expand this widget and all its parents horizontally"), "rw");
  bool    vspread = Bool (_("Vertical Spread"),   _("Whether to expand this widget and all its parents vertically"), "rw");
  bool    hshrink = Bool (_("Horizontal Shrink"), _("Whether the widget may be shrunken horizontally"), "rw");
  bool    vshrink = Bool (_("Vertical Shrink"),   _("Whether the widget may be shrunken vertically"), "rw");
  float64 hposition = Range (_("Horizontal Position"), _("Horizontal layout position for the widget"), "Prw", 0, 99999, 5);
  float64 hspan     = Range (_("Horizontal Span"),     _("Horizontal span for widget layout"), "Prw", 1, 100000, 5);
  float64 vposition = Range (_("Vertical Position"),   _("Vertical layout position for the widget"), "Prw", 0, 99999, 5);
  float64 vspan     = Range (_("Vertical Span"),       _("Vertical span for widget layout"), "Prw", 1, 100000, 5);
  float64 hanchor = Range (_("Horizontal Anchor"), _("Horizontal position of child anchor, 0=left, 1=right"), "Prw", 0, 1, 0.5);
  float64 vanchor = Range (_("Vertical Anchor"),   _("Vertical position of child anchor, 0=bottom, 1=top"), "Prw", 0, 1, 0.5);
  float64 halign = Range (_("Horizontal Alignment"), _("Horizontal position within extra space when unexpanded, 0=left, 1=right"), "Prw", 0, 1, 0.5);
  float64 hscale = Range (_("Horizontal Scale"),     _("Fractional horizontal expansion within extra space, 0=unexpanded, 1=expanded"), "Prw", 0, 1, 0.5);
  float64 valign = Range (_("Vertical Alignment"),   _("Vertical position within extra space when unexpanded, 0=bottom, 1=top"), "Prw", 0, 1, 0.5);
  float64 vscale = Range (_("Vertical Scale"),       _("Fractional vertical expansion within extra space, 0=unexpanded, 1=expanded"), "Prw", 0, 1, 0.5);
  int32   left_spacing   = Range (_("Left Spacing"),   _("Amount of spacing to add at the widget's left side"),   "Prw", 0, MAXINT15, 3);
  int32   right_spacing  = Range (_("Right Spacing"),  _("Amount of spacing to add at the widget's right side"),  "Prw", 0, MAXINT15, 3);
  int32   bottom_spacing = Range (_("Bottom Spacing"), _("Amount of spacing to add at the widget's bottom side"), "Prw", 0, MAXINT15, 3);
  int32   top_spacing    = Range (_("Top Spacing"),    _("Amount of spacing to add at the widget's top side"),    "Prw", 0, MAXINT15, 3);
  /// @name Widget Selector API
  bool            match_selector          (String selector);     ///< Check if selector matches this widget.
  Widget          query_selector          (String selector);     ///< Returns first selector match.
  WidgetSeq       query_selector_all      (String selector);     ///< Returns all selector matches.
  Widget          query_selector_unique   (String selector);     ///< Returns single selector match if unique.
  /// @name Widget Miscellaneous
  void            data_context            (Object context);      ///< Provide context object for data Binding.
  /// @name Hosting arbitrary user data
  void            set_user_data           (String name, Any any);       ///< Store user data @a any under @a name.
  Any             get_user_data           (String name);                ///< Retrieve user data stored under @a name.
  /// @name Testing & Debugging
  String	  test_dump               ();
};

/// Container is a special type of Widget that can contain other widgets.
/// See also the corresponding implementation class ContainerImpl.
interface Container : Widget {
  /// Create a child widget from the @a widget_identifier template and add it to the container.
  Widget create_widget (String widget_identifier, StringSeq args = 0);
  void   remove_widget (Widget child);
};

/** Window represents the toplevel onscreen widget.
 * A Window interface is the main user visible handle for screen objects in Rapicorn.
 * Windows can be obtained from the Application singleton. They contain UI elements
 * like buttons and text fields, and the neccessary logic for UI event processing.
 * <br/> See also the corresponding implementation class WindowImpl.
 */
interface Window : Container {
  String        title = String (_("Window Title"), _("User visible title to be displayed in the window title bar"), "rw");
  bool          auto_focus = Bool (_("Auto Focus"), _("Automatically set focus widget when the window is shown initially"), "rw");
  bool          screen_viewable         (); ///< Check whether the window is currently viewable on screen.
  void          show                    (); ///< Show (display) a window so it appears on screen.
  bool          closed                  (); ///< Check wether the window has been shown or is closed.
  void          close                   (); ///< Close (hide) an on screen window.
  void          destroy                 (); ///< Destroy and dispose a (possibly on screen) window.
  bool          snapshot                (String     pngname);
  void          query_idle              (); ///< Request notificaiton when idle.
  signal void   notify_idle             (); ///< Notificaiton signal, emitted after query_idle() once events are processed.
  signal bool   commands                (String     cmdname, StringSeq args);
  signal void   displayed               ();
  bool          synthesize_click        (Widget       widget,
                                         int32        button,
                                         float64      xalign = 0.5,
                                         float64      yalign = 0.5);
  bool          synthesize_enter        (float64      xalign = 0.5,
                                         float64      yalign = 0.5);
  bool          synthesize_leave        ();
  bool          synthesize_delete       ();
};

/// A sequence of Window objects.
sequence WindowList { Window windows; };

/// The Arrangement layout container allows coordinate driven free form positioning of children.
/// See also the corresponding implementation class ArrangementImpl.
interface Arrangement : Container {
  float64 xorigin        = Range (_("X-Origin"), _("The x coordinate origin to be displayed by the arrangement"), "rw", -MININT31, +MAXINT31, 10);
  float64 yorigin        = Range (_("Y-Origin"), _("The y coordinate origin to be displayed by the arrangement"), "rw", -MININT31, +MAXINT31, 10);
  float64 origin_hanchor = Range (_("Horizontal Anchor"), _("Horizontal position of the origin within arrangement, 0=left, 1=right"), "rw", 0, 1, 0.1);
  float64 origin_vanchor = Range (_("Vertical Anchor"),   _("Vertical position of the origin within arrangement, 0=bottom, 1=top"),   "rw", 0, 1, 0.1);
};

/// The Alignment layout container allows adding of extra padding around its child.
/// See also the corresponding implementation class AlignmentImpl.
interface Alignment : Container {
  int32 left_padding   = Range (_("Left Padding"),   _("Amount of padding to add at the child's left side"),   "rw", 0, 65535, 3);
  int32 right_padding  = Range (_("Right Padding"),  _("Amount of padding to add at the child's right side"),  "rw", 0, 65535, 3);
  int32 bottom_padding = Range (_("Bottom Padding"), _("Amount of padding to add at the child's bottom side"), "rw", 0, 65535, 3);
  int32 top_padding    = Range (_("Top Padding"),    _("Amount of padding to add at the child's top side"),    "rw", 0, 65535, 3);
  int32 padding        = Range (_("Padding"),        _("Amount of padding to add at the child's sides"),       "wo", 0, 65535, 3);
};

/// The Frame container decorates its single child with a state dependant frame drawing.
/// See also the corresponding implementation class FrameImpl.
interface Frame : Container {
  DrawFrame normal_frame    = Enum (_("Normal Frame"),   _("The kind of frame to draw in normal state"), "rw");
  DrawFrame active_frame    = Enum (_("Active Frame"), _("The kind of frame to draw in active state"), "rw");
  DrawFrame frame_type      = Enum (_("Frame Type"),     _("The kind of frame to draw in all states"), "wo");
  bool      overlap_child   = Bool (_("Overlap Child"),  _("Draw frame into child allocation"), "rw");
  DrawFrame current_frame ();     ///< Retrieve the kind of frame that is currently being displayed.
};

/// The FocusFrame container decorates its single child depending on whether its descendants have focus.
/// See also the corresponding implementation class FocusFrameImpl.
interface FocusFrame : Frame {
  DrawFrame focus_frame = Enum (_("Focus Frame"), _("The kind of frame to draw in focus state"), "rw");
  bool      tight_focus = Bool (_("Tight Focus"), _("Prevent extra padding around focus frames"), "rw");
};

/// The Ambience container provides its single child with state dependant background painting.
/// See also the corresponding implementation class AmbienceImpl.
interface Ambience : Container {
  String normal_background          = String (_("Normal Background"), _("The kind of background painted when normal"), "rw");
  String hover_background           = String (_("Hover Background"), _("The kind of background painted when in hover state"), "rw");
  String active_background          = String (_("Active Background"), _("The kind of background painted in active state"), "rw");
  String insensitive_background     = String (_("Insensitive Background"), _("The kind of background painted when insensitive"), "rw");
  Lighting normal_lighting      = Enum (_("Normal Lighting"), _("The kind of lighting painted when normal"), "rw");
  Lighting hover_lighting       = Enum (_("Hover Lighting"), _("The kind of lighting painted when in hover state"), "rw");
  Lighting active_lighting      = Enum (_("Active Lighting"), _("The kind of lighting painted in active state"), "rw");
  Lighting insensitive_lighting = Enum (_("Insensitive Lighting"), _("The kind of lighting painted when insensitive"), "rw");
  Lighting normal_shade         = Enum (_("Normal Shade"), _("The kind of shade painted when normal"), "rw");
  Lighting hover_shade          = Enum (_("Hover Shade"), _("The kind of shade painted when in hover state"), "rw");
  Lighting active_shade         = Enum (_("Active Shade"), _("The kind of shade painted in active state"), "rw");
  Lighting insensitive_shade    = Enum (_("Insensitive Shade"), _("The kind of shade painted when insensitive"), "rw");
  String   background           = String (_("Background"), _("The kind of background painted for all modes"), "wo");
  Lighting lighting             = Enum (_("Lighting"), _("The kind of lighting painted for all modes"), "wo");
  Lighting shade                = Enum (_("Shade"), _("The kind of shade painted for all modes"), "wo");
};

/// The Table layout container allows to arrange widgets in rows and columns.
/// See also the corresponding implementation class TableImpl.
interface Table : Container {
  bool  homogeneous = Bool (_("Homogeneous"), _("Whether all children get the same size"), "rw");
  int32 col_spacing = Range (_("Column Spacing"), _("The amount of space between two consecutive columns"), "rw", 0, 65535, 10);
  int32 row_spacing = Range (_("Row Spacing"), _("The amount of space between two consecutive rows"), "rw", 0, 65535, 10);
  int32 n_cols      = Range (_("Number of Columns"), _("The number of columns available in this table to attach children"), "rw", 0, MAXINT31, 1);
  int32 n_rows      = Range (_("Number of Rows"), _("The number of rows available in this table to attach children"), "rw", 0, MAXINT31, 1);
  bool  is_col_used (int32 col);     ///< Find out if any child allocates the specified column.
  bool  is_row_used (int32 row);     ///< Find out if any child allocates the specified row.
  void  resize      (int32 n_cols, int32 n_rows);        ///< Resize columns and rows, but accomodate for space needed by children.
  void  insert_cols (int32 first_col, int32 n_cols);     ///< Insert a number of columns, shifting or stretching children as needed.
  void  insert_rows (int32 first_row, int32 n_rows);     ///< Insert a number of rows, shifting or stretching children as needed.
};

/// The HBox layout container arranges its children horizontally.
/// See also the corresponding implementation class HBoxImpl.
interface HBox : Container {
  bool  homogeneous = Bool (_("Homogeneous"), _("Whether all children get the same size"), "rw");
  int32 spacing     = Range (_("Spacing"), _("The amount of space between two children"), "rw", 0, 65535, 10);
};

/// The VBox layout container arranges its children vertically.
/// See also the corresponding implementation class VBoxImpl.
interface VBox : Container {
  bool  homogeneous = Bool (_("Homogeneous"), _("Whether all children get the same size"), "rw");
  int32 spacing     = Range (_("Spacing"), _("The amount of space between two children"), "rw", 0, 65535, 10);
};

/** The ButtonArea container provides an area with the ability to process button clicks.
 * Arbitraty actions can be associated with button1, button2 and button3 clicks to be caried
 * out when the respective mouse button is clicked.
 * <br/> See also the corresponding implementation class ButtonAreaImpl.
 */
interface ButtonArea : Container {
  Click  click_type = Enum   (_("CLick Type"), _("Click event generation type"), "rw");
  bool   can_toggle = Bool   (_("Can Toggle"), _("Boolean indicating whether this button may be toggled"), "rw");
  String on_click   = String (_("On CLick"), _("Action to carry out on button1 clicks."), "rw");
  String on_click2  = String (_("On CLick"), _("Action to carry out on button2 clicks."), "rw");
  String on_click3  = String (_("On CLick"), _("Action to carry out on button3 clicks."), "rw");
  String label      = String (_("Label"), _("Default label to use for this button."), "w");
};

/// RadioButton widgets are used to present a set of choices with a single selection possible.
/// See also the corresponding implementation class RadioButtonImpl.
interface RadioButton : ButtonArea {
  String radio_group = String (_("Radio Group"), _("Widget group used to ensure exclusive selection of a single radio button."), "rw");
};

/// The ScrollArea container can display its child paritally and scroll to different parts.
/// See also the corresponding implementation class ScrollAreaImpl.
interface ScrollArea : Container {
  float64 x_offset  ();     ///< Retrieve the current @a x scroll offset.
  float64 y_offset  ();     ///< Retrieve the current @a x scroll offset.
  void    scroll_to (float64 x, float64 y);     ///< Scroll to the position denoted by (x, y).
};

/// The SliderArea container serves as control area for a slider trough and skid.
/// See also the corresponding implementation class SliderAreaImpl.
interface SliderArea : Container {
  bool flipped = Bool (_("Flipped"), _("Invert (flip) display of the slider value"), "rw");
  AdjustmentSourceType adjustment_source = Enum (_("Adjustment Source"), _("Type of source to retrive an adjustment from"), "rw");
};

/// The SliderTrough container reflects the range of possible slider values, it contains the SliderSkid.
/// See also the corresponding implementation class SliderTroughImpl.
interface SliderTrough : Container {
};

/// The SliderSkid widget indicates the current slider position within a SliderArea.
/// See also the corresponding implementation class SliderSkidImpl.
interface SliderSkid : Container {
  bool vertical_skid = Bool (_("Vertical Skid"), _("Adjust behaviour to vertical skid movement"), "rw");
};

/// The Arrow widget paints a single arrow with configurable direction.
/// See also the corresponding implementation class ArrowImpl.
interface Arrow : Widget {
  Direction  arrow_dir   = Enum (_("Arrow Direction"), _("The direction the arrow points to"), "rw");
  SizePolicy size_policy = Enum (_("Size Policy"),     _("Policy which determines coupling of width and height"), "rw");
};

/// The DotGrid widget paints a configurable set of dots arranged in a grid.
/// See also the corresponding implementation class DotGridImpl.
interface DotGrid : Widget {
  DrawFrame normal_dot      = Enum (_("Normal Dot"), _("The kind of dot-frame to draw in normal state"), "rw");
  DrawFrame active_dot      = Enum (_("Active Dot"), _("The kind of dot-frame to draw in active state"), "rw");
  DrawFrame dot_type        = Enum (_("Dot Type"), _("The kind of dot-frame to draw in all states"), "wo");
  int32 n_hdots             = Range (_("H-Dot #"), _("The number of horizontal dots to be drawn"), "rw", 0, 99999, 3);
  int32 n_vdots             = Range (_("V-Dot #"), _("The number of vertical dots to be drawn"), "rw", 0, 99999, 3);
  int32 right_padding_dots  = Range (_("Right Padding Dots"), _("Amount of padding in dots to add at the child's right side"), "rw", 0, 65535, 3);
  int32 top_padding_dots    = Range (_("Top Padding Dots"), _("Amount of padding in dots to add at the child's top side"), "rw", 0, 65535, 3);
  int32 left_padding_dots   = Range (_("Left Padding Dots"), _("Amount of padding in dots to add at the child's left side"), "rw", 0, 65535, 3);
  int32 bottom_padding_dots = Range (_("Bottom Padding Dots"), _("Amount of padding in dots to add at the child's bottom side"), "rw", 0, 65535, 3);
  DrawFrame current_dot ();     ///< Retrieve the kind of dot that is currently being displayed.
};

/** The Drawable widget allows display of custom graphics.
 * A Drawable widget allows client-side rendering by emitting the redraw() signal when updates are needed.
 * The draw_rect() method is used to draw into the widget display.
 * <br/> See also the corresponding implementation class DrawableImpl.
 */
interface Drawable : Widget {
  signal void redraw    (int32 x, int32 y, int32 w, int32 h);   ///< Requests a redraw at @a width and @a height.
  void	      draw_rect	(int32 x, int32 y, Pixbuf pixbuf);      ///< Draws pixels on the drawable display.
};

/// The LayerPainter container allows rendering widgets on top of each other.
/// See also the corresponding implementation class LayerPainterImpl.
interface LayerPainter : Container {
};

/// Image widgets are used to display pixel or vector images.
/// See also the corresponding implementation class ImageImpl.
interface Image : Widget {
  String        source  = String (_("Image Source"), _("Resource locator for the image (fragment) to be displayed."), "rw");
  String 	stock   = String (_("Stock"), _("Load a stock icon."), "rw");
  Pixbuf        pixbuf;
};

/// This is a simple widget that can paint radio marks.
/// See also the corresponding implementation class ShapePainterImpl.
interface ShapePainter : Container {
  String shape_style_normal  = String (_("Shape Style Normal"), _("Shape style for WidgetState::NORMAL."), "rw");
};

/// The ElementPainter widget displays state dependent SVG image elements and places its child within the fill area.
/// State dependent paintings work by picking an SVG @a element from @a source. Variants of the element ID that have
/// widget states appended (e.g. "ID:active") and match the WidgetState of @a this are preferred.
/// See also the corresponding implementation class ElementPainterImpl.
interface ElementPainter : Container {
  String svg_source            = String (_("SVG Source"), _("SVG image file providing elements to be painted."), "rw");
  String sizing_element        = String (_("Sizing Element"), _("ID of an SVG element used to define the size of the child fill area."), "rw");
  String normal_element        = String (_("Normal Element"), _("ID of a state-modifiable SVG element to paint and define the size of the child fill area."), "rw");
  String acceleratable_element = String (_("Acceleratable Element"), _("Like normal_element for WidgetState::ACCELERATABLE."), "rw");
  String hover_element         = String (_("Hover Element"), _("Like normal_element for WidgetState::HOVER."), "rw");
  String panel_element         = String (_("Panel Element"), _("Like normal_element for WidgetState::PANEL."), "rw");
  String default_element       = String (_("Default Element"), _("Like normal_element for WidgetState::DEFAULT."), "rw");
  String selected_element      = String (_("Selected Element"), _("Like normal_element for WidgetState::SELECTED."), "rw");
  String focused_element       = String (_("Focused Element"), _("Like normal_element for WidgetState::FOCUSED."), "rw");
  String insensitive_element   = String (_("Insensitive Element"), _("Like normal_element for WidgetState::INSENSITIVE."), "rw");
  String active_element        = String (_("Active Element"), _("Like normal_element for WidgetState::ACTIVE."), "rw");
  String toggled_element       = String (_("Toggled Element"), _("Like normal_element for WidgetState::TOGGLED."), "rw");
  String retained_element      = String (_("Retained Element"), _("Like normal_element for WidgetState::RETAINED."), "rw");
  String stashed_element       = String (_("Stashed Element"), _("Like normal_element for WidgetState::STASHED."), "rw");
  String filling_element       = String (_("Filling Element"), _("ID of a state-modifiable SVG element used to to paint the child fill area."), "rw");
};

/// The FocusPainter container decorates its single child according to focus changes.
/// This element painter container selects "focused" state elements depending on whether
/// its descendants have focus, or its nextmost ancestor that has its NEEDS_FOCUS_INDICATOR flag set.
/// It also provide the HAS_FOCUS_INDICATOR flag for its nextmost NEEDS_FOCUS_INDICATOR ancestor.
/// See also the corresponding implementation class FocusPainterImpl.
interface FocusPainter : ElementPainter {
};

/// A widget for text display.
/// See also the corresponding implementation class LabelImpl.
interface Label : Container {
  String   plain_text     = String (_("Plain Text"),  _("The text to display, without markup information."), "rw");
  String   markup_text    = String (_("Markup Text"), _("The text to display, containing font and style markup."), "rw");
  String   text           = String (_("Text"), _("This property auto-detects markup and sets plain_text or markup_text accordingly."), "w");
};

/// A widget for text display, editing, selecting and pasting.
/// See also the corresponding implementation class TextEditorImpl.
interface TextEditor : Container {
  String   plain_text     = String (_("Plain Text"),  _("The text to display, without markup information."), "rw");
  String   markup_text    = String (_("Markup Text"), _("The text to display, containing font and style markup."), "rw");
  int32    request_chars  = Range (_("Request Chars"),  _("Number of characters to request space for."), "rw", 0, 65535, 4);
  int32    request_digits = Range (_("Request Digits"), _("Number of digits to request space for."), "rw", 0, 65535, 2);
};

/// A container that supports the selected state.
/// See also the corresponding implementation class SelectableItemImpl.
interface SelectableItem : Container {
  int32 button   = Range (_("Button"), _("Which button may toggle the SELECTED state"), "rw", 0, 65535, 1);
};

/** A list widget containing scrollable and selectable widgets.
 * List widget is a widget that displays a list of widgets generated according to a data source.
 * <br/> See also the corresponding implementation class WidgetListImpl.
 * @EXPERIMENTAL: The WidgetList and WidgetListRow designs are not finalised.
 */
interface WidgetList : Container {
  String        row_identifier  = String (_("Row Identifier"), _("Widget identifier to create list rows from."), "rw");
  SelectionMode selection_mode  = Enum (_("Selection Mode"), _("None - allow no selected rows<br/>"
                                                               "Single - allow a single selected row<br/>"
                                                               "Browse - always select a single row<br/>"
                                                               "Multiple - allow any row selection combinations<br/>"),
                                        "rw");
  signal void   selection_changed ();                       ///< This signal is emitted whenever the list selection changes.
  BoolSeq       get_selection  ();                          ///< Retrieve a bit mask for all selected widgets.
  void          set_selection  (BoolSeq selection);         ///< Reset the list of selected widgets according to a bit mask.
  void          select_range   (int32 first, int32 length); ///< Select a range of widgets.
  void          unselect_range (int32 first, int32 length); ///< Unselect a range of widgets.
  void          bind_model     (ListModel model, String row_identifier);
  Widget        create_row     (int64 index, String widget_identifier, StringSeq arguments = 0); ///< Add/replace row @a index with a new widget.
};

/** Application singleton.
 * For each Rapicorn program, there exists one global Application singleton.
 * All general program operations are provided by the Application interface,
 * such as the facility to create Window objects on the screen.
 * <br/> See also the corresponding implementation class ApplicationImpl.
 * @nosubgrouping
 */
interface Application : Object {
  /// @name Application Startup
  /** Setup application display name and unique identifier.
   *
   * The Application.setup() function should be called once and before any UI
   * windows are created. If non-empty, the @a application_name is a possibly
   * localized string useful to display the application name in user interfaces.
   * If given, the @a program_name is a refinement of argv0, used for logging
   * messages, as X11 application class and to identify persistently stored
   * resources such as application session state.
   */
  void          setup           (String application_name, String program_name = "");
  String        auto_path       (String         file_name,
                                 String         binary_path,
                                 bool           search_vpath = true);
  StringSeq     auto_load       (String         file_name,
                                 String         binary_path,
                                 String         i18n_domain = "");
  bool          factory_window  (String         factory_definition);
  void          load_string     (String         xml_string,
                                 String         i18n_domain = "");
  /// @name Window handling
  Window        create_window   (String window_identifier, StringSeq arguments = 0);     ///< Create a hidden window with children.
  bool          finishable      ();                     ///< Indicates whether all windows and other primary event sources are gone.
  signal void   missing_primary ();                     ///< Indicates the Application entering finishable() state.
  void          close_all       ();                     ///< Forces closing of all windows.
  Window        query_window    (String selector);      ///< Returns first Window match for @a selector.
  WindowList    query_windows   (String selector);      ///< Returns all Window matches for @a selector.
  WindowList    list_windows    ();
  /// @name Application Factory
  BindableRelay  create_bindable_relay   ();    	///< Create a BindableRelay, usually for uses in @a data_context.
  ListModelRelay create_list_model_relay ();    	///< Create a ListModelRelay coupled with a ListModel.
  /// @name Test counter for debugging/profiling
  void          test_counter_set        (int32 val);      ///< Testing, set the test counter.
  void          test_counter_add        (int32 val);      ///< Testing, add to the test counter.
  int32         test_counter_get        ();               ///< Testing, retrieve the test counter value.
  int32         test_counter_inc_fetch  ();               ///< Testing, increment and return the resulting test counter value.
  int64         test_hook               ();
};

/// An enum used exclusively for unit testing.
enum TestEnum {
  VALUE1,
  VALUE2,
  VALUE3,
};

/// A widget used exclusively for unit testing.
/// See also the corresponding implementation class IdlTestWidgetImpl.
interface IdlTestWidget : Widget {
  bool           bool_prop;
  int32          int_prop;
  float64        float_prop;
  String         string_prop;
  TestEnum       enum_prop;
  Requisition    record_prop;
  StringSeq      sequence_prop;
  IdlTestWidget  self_prop;
};

/// A container used for snapshooting and unit testing.
/// See also the corresponding implementation class TestBoxImpl.
interface TestBox : Container {
  String snapshot_file = String (_("Snapshot File Name"), _("PNG image file name to write snapshot to"), "rw");
};

/// A container used exclusively for unit testing.
/// See also the corresponding implementation class TestContainerImpl.
interface TestContainer : Container {
  String  value            = String ("Value", "Store string value for assertion", "rw");
  String  assert_value     = String ("Assert Value", "Assert a particular string value", "rw");
  float64 assert_left      = Range ("Assert-Left", "Assert positioning of the left widget edge", "rw", -MAXFLOAT64, +MAXFLOAT64, 0);
  float64 assert_right     = Range ("Assert-Right", "Assert positioning of the right widget edge", "rw", -MAXFLOAT64, +MAXFLOAT64, 0);
  float64 assert_bottom    = Range ("Assert-Bottom", "Assert positioning of the bottom widget edge", "rw", -MAXFLOAT64, +MAXFLOAT64, 0);
  float64 assert_top       = Range ("Assert-Top", "Assert positioning of the top widget edge", "rw", -MAXFLOAT64, +MAXFLOAT64, 0);
  float64 assert_width     = Range ("Assert-Width", "Assert amount of the widget width", "rw", -MAXFLOAT64, +MAXFLOAT64, 0);
  float64 assert_height    = Range ("Assert-Height", "Assert amount of the widget height", "rw", -MAXFLOAT64, +MAXFLOAT64, 0);
  float64 epsilon          = Range ("Epsilon", "Epsilon within which assertions must hold", "rw", -MAXFLOAT64, +MAXFLOAT64, 0);
  bool    paint_allocation = Bool ("Paint Allocation", "Fill allocation rectangle with a solid color", "rw");
  bool    fatal_asserts    = Bool ("Fatal-Asserts", "Handle assertion failures as fatal errors", "rw");
  String  accu             = String ("Accumulator", "Store string value and keep history", "rw");
  String  accu_history     = String ("Accu-History", "Concatenated accumulator history", "rw");
};

} // Rapicorn

/* Emacs settings (#Specifying-File-Variables):
 * Local Variables:
 * mode: c++
 * End:
 */
