# Rapicorn			- non-recursive Makefile

# Test categories: 1-misc 2-rcore 3-aidacc 4-ui 5-python 6-tools 7-images 8-docs 9-benchmarks

TESTS_PKG_CONFIG = PKG_CONFIG_PATH="$(DESTDIR)$(rapicorn_pkgconfigdir):$$PKG_CONFIG_PATH" $(PKG_CONFIG)

# == t101-dynamic-cast-check ==
# deprecate dynamic casts of refernce types (broken in g++ <= 3.3.5)
t101-dynamic-cast-check: $(HEADERS) $(SOURCES)
	$(Q) echo "  CHECK  Rejecting dynamic_cast of reference types..." \
	&& grep -Hn 'dynamic_cast[^<]*<[^>&]*&' $(HEADERS) $(SOURCES) \
	| grep '.' ; exit $$[!$$?] # fail on matches
make_check_targets	+= t101-dynamic-cast-check

# == t190-installcheck-api-test ==
t190-installcheck-api-use: tests/t190-api-use.cc
	@echo "  BUILD   " $@
	$(Q) $(CXX) -Werror $< -c -o $(<:.cc=.o)     `$(TESTS_PKG_CONFIG) --cflags rapicorn-@MAJOR@` \
		; eval "$$TSTDIAGNOSE" "'Compile $<'"
	$(Q) $(CXX) -Werror $(<:.cc=.o) -o $(<:.cc=) `$(TESTS_PKG_CONFIG) --libs   rapicorn-@MAJOR@` \
		; eval "$$TSTDIAGNOSE" "'Link    $<'"
	$(Q) LD_LIBRARY_PATH="$(libdir):$$LD_LIBRARY_PATH" ./$(<:.cc=) \
		; eval "$$TSTDIAGNOSE" "'Execute $<'"
	$(Q) rm -f $(<:.cc=.o) $(<:.cc=)
.PHONY: t190-installcheck-api-use
installcheck-local: t190-installcheck-api-use

# == t201-rcore-basics ==
noinst_PROGRAMS			       += tests/t201-rcore-basics
tests_t201_rcore_basics_CXXFLAGS	= $(AM_CXXFLAGS) $(LIBRAPICORN_CFLAGS)
tests_t201_rcore_basics_LDADD		= ui/librapicorn-@MAJOR@.la $(LIBRAPICORN_LIBS)
tests_t201_rcore_basics_SOURCES		=	\
	tests/t201/rcore-basics-main.cc		\
	tests/t201/rcore-basics-aidatests.cc	\
	tests/t201/rcore-basics-markup.cc	\
	tests/t201/rcore-basics-strings.cc	\
	tests/t201/rcore-basics-timebits.cc	\
	tests/t201/rcore-basics-datalist.cc	\
	tests/t201/rcore-basics-loops.cc
tests/t201/rcore-basics-markup.cc: tests/t201/rcore-basics-xmldata.cc

# == t201-rcore-basics-test ==
t201-rcore-basics-test: tests/t201-rcore-basics tests/t201-rcore-basics.outref
	$(Q) cd tests && $(TAPTOOL) --test-name t201-rcore-basics -- ./t201-rcore-basics
	$(Q) rm -f $(TSTOUT)
	$(Q) cd tests && $(tests_t204_assertions_env) ./t201-rcore-basics --backtrace		2>$(TSTOUT) && \
	     grep -qi 'Backtrace'			$(TSTOUT) && \
	     grep -qi 'in my_compare_func'		$(TSTOUT) ; $(TSTRESULT) "check backtrace()"
	$(Q) cd tests && rm -f $(TSTOUT) && eval "$$TSTDIAGNOSE"
make_check_targets += t201-rcore-basics-test

# == t202-randomized-hashing ==
t202-randomized-hashing-test: tests/t201-rcore-basics	# test hash reseeding at program start
	$(Q) test `tests/t201-rcore-basics --string-hash64 foo` != `tests/t201-rcore-basics --string-hash64 foo` ; $(TSTRESULT)
make_check_targets += t202-randomized-hashing-test

# == t203-more-basics ==
noinst_PROGRAMS				+= tests/t203-more-basics
tests_t203_more_basics_CXXFLAGS		 = $(AM_CXXFLAGS) $(LIBRAPICORN_CFLAGS)
tests_t203_more_basics_LDADD		 = ui/librapicorn-@MAJOR@.la $(LIBRAPICORN_LIBS)
tests_t203_more_basics_SOURCES		 = 	\
	tests/t203/more-basics-main.cc		\
	tests/t203/more-basics-performance.cc	\
	tests/t203/more-basics-signal2.cc	\
	tests/t203/more-basics-svgtool.cc	\
	tests/t203/more-basics-threads.cc	\
	tests/t203/more-basics-xmltest.cc
tests/t203/more-basics-xmltest.cc: tests/t201/rcore-basics-xmldata.cc

# == t203-more-basics-test ==
t203-more-basics-test: tests/t203-more-basics tests/t203-more-basics.outref
	$(Q) cd tests && $(TAPTOOL) --test-name t203-more-basics -- ./t203-more-basics
make_check_targets += t203-more-basics-test

# == t204-assertions ==
t204-assertions-test: tests/t203-more-basics # validate failing assertions and fatal aborting
	$(Q) rm -f $(TSTOUT)
	$(Q) (! $(tests_t204_assertions_env) tests/t203-more-basics --test-assertion-hook	2>$(TSTOUT)) $(QSTDERR) && \
	     grep -q 'assertion-hook.*magic=0xdecaff'	$(TSTOUT) ; $(TSTRESULT) "check Test::set_assertion_hook()"
	$(Q) (! $(tests_t204_assertions_env) tests/t203-more-basics --test-critical		2>$(TSTOUT)) $(QSTDERR) && \
	     grep -q 'test-critical-message'		$(TSTOUT) ; $(TSTRESULT) "verify critical message"
	$(Q) (! $(tests_t204_assertions_env) tests/t203-more-basics --test-assert		2>$(TSTOUT)) $(QSTDERR) && \
	     grep -q 'failed.*"test-assert"'		$(TSTOUT) ; $(TSTRESULT) "verify failing assert"
	$(Q) (! $(tests_t204_assertions_env) tests/t203-more-basics --test-unreached		2>$(TSTOUT)) $(QSTDERR) && \
	     grep -q 'FATAL:.*not.*reach'		$(TSTOUT) ; $(TSTRESULT) "verify failing unreached"
	$(Q) (! $(tests_t204_assertions_env) tests/t203-more-basics --test-TASSERT		2>$(TSTOUT)) $(QSTDERR) && \
	     grep -q 'assert.*fail.*".*TASSERT"'	$(TSTOUT) ; $(TSTRESULT) "verify failing TASSERT()"
	$(Q) (! $(tests_t204_assertions_env) tests/t203-more-basics --test-TCMP			2>$(TSTOUT)) $(QSTDERR) && \
	     grep -q 'assert.*fail.*".*TCMP"'		$(TSTOUT) ; $(TSTRESULT) "verify failing TCMP()"
	$(Q) (! $(tests_t204_assertions_env) tests/t203-more-basics --test-fatal		2>$(TSTOUT)) $(QSTDERR) && \
	     grep -q 'FATAL:.*fatal.*"test-fatal"'	$(TSTOUT) ; $(TSTRESULT) "verify fatal error"
	$(Q) grep -qi 'Aborting..'			$(TSTOUT) ; $(TSTRESULT) "verify aborting"
	$(Q) rm -f $(TSTOUT) && eval "$$TSTDIAGNOSE"
tests_t204_assertions_env = RAPICORN=debug:no-syslog:no-fatal-syslog
make_check_targets += t204-assertions-test

# == t205-debug-output ==
t205-debug-output-test: tests/t203-more-basics # check various non-fatal logging conditions
	$(Q) rm -f $(TSTOUT)
	$(Q) $(tests_t205_debug_output_env) tests/t203-more-basics --test-logging	2>>$(TSTOUT)
	$(Q) grep -q 'debugging messages'             $(TSTOUT) ; $(TSTRESULT) "check debugging"
	$(Q) grep -q 'assertion failed: errno == 0'   $(TSTOUT) ; $(TSTRESULT) "check errno diagnostics"
	$(Q) grep -q 'failed.*"assert-return-void"'   $(TSTOUT) ; $(TSTRESULT) "check assert_return"
	$(Q) grep -q 'failed.*"assert-return+val"'    $(TSTOUT) ; $(TSTRESULT) "check assert_return+value"
	$(Q) grep -q 'CRITICAL:.*"test-critical"'     $(TSTOUT) ; $(TSTRESULT) "check test critical()"
	$(Q) eval "$$TSTDIAGNOSE"
	$(Q) rm -f $(TSTOUT)
tests_t205_debug_output_env = RAPICORN=no-syslog:no-fatal-syslog RAPICORN_DEBUG=all
make_check_targets += t205-debug-output-test

# == t206-naive-entropy ==
t206-naive-entropy-test: tests/t901-bench-rcore
	$(Q) A=`tests/t901-bench-rcore --entropy` ; B=`tests/t901-bench-rcore --entropy`; \
	       test -n "$$A$$B" -a "$$A" != "$$B"; $(TSTRESULT) "naive startup entropy check"
	$(Q) A=`tests/t901-bench-rcore --system-entropy` ; B=`tests/t901-bench-rcore --system-entropy`; \
	       test -n "$$A$$B" -a "$$A" != "$$B"; $(TSTRESULT) "naive system entropy check"
	$(Q) A=`tests/t901-bench-rcore --runtime-entropy` ; B=`tests/t901-bench-rcore --runtime-entropy`; \
	       test -n "$$A$$B" -a "$$A" != "$$B"; $(TSTRESULT) "naive runtime entropy check"
	$(Q) eval "$$TSTDIAGNOSE"
make_check_targets += t206-naive-entropy-test

# == t301-testpass-idl-test ==
t301-testpass-idl-test: tests/t301/testpass.idl
	$(Q) $(AIDACC_INTERN) --aida-debug $(topdir)/tests/t301/testpass.idl > /dev/null ; eval "$$TSTDIAGNOSE"
make_check_targets += t301-testpass-idl-test

# == t302-testfail-idl-test ==
t302-testfail-idl-test: tests/t302/testfail.idl tests/t302/testfail.ref
	$(Q) $(AIDACC_INTERN) --aida-fail-file-test $(topdir)/tests/t302/testfail.idl > $(TSTOUT) ; eval "$$TSTDIAGNOSE"
	$(Q) sed 's/\(:[0-9]\+:[0-9]\+: Trying to find one of \).*/\1.../' < $(TSTOUT) > $(TSTOUT).notokens && mv $(TSTOUT).notokens $(TSTOUT)
	$(Q) eval "$$TSTDIFF" "'$(topdir)/tests/t302/testfail.ref'" "'$(TSTOUT)'"
make_check_targets += t302-testfail-idl-test

# == t303-mini-server ==
noinst_PROGRAMS				+= tests/t303-mini-server
tests_t303_mini_server_LDADD		 = ui/librapicorn-@MAJOR@.la
tests_t303_mini_server_CXXFLAGS		 = $(AM_CXXFLAGS) -Itests/
tests_t303_mini_server_SOURCES		 =	\
	tests/t303-mini-server-main.cc
tests_t303_generated			 =	\
	tests/t303-mini-server-srvt.hh		\
	tests/t303-mini-server-srvt.cc		\
	tests/t303-mini-server-clnt.hh		\
	tests/t303-mini-server-clnt.cc
# MAKE(1) supports parallel execution of a multiple-targets-rule *only* for implicit rules (with '%')
tests/t303-%-clnt.hh tests/t303-%-clnt.cc tests/t303-%-srvt.hh tests/t303-%-srvt.cc: tests/t303-%.idl $(AIDACC_CXXSTUB_PY) $(AIDACC_INTERN)
	$(AM_V_GEN)
	$(Q) $(AIDACC_INTERN) -x CxxStub -G clienthh -G strip-path=$(topdir)/ $< -o tests/t303-$*-clnt.hh
	$(Q) $(AIDACC_INTERN) -x CxxStub -G clientcc -G strip-path=$(topdir)/ $< -o tests/t303-$*-clnt.cc
	$(Q) $(AIDACC_INTERN) -x CxxStub -G serverhh -G strip-path=$(topdir)/ $< -o tests/t303-$*-srvt.hh
	$(Q) $(AIDACC_INTERN) -x CxxStub -G servercc -G strip-path=$(topdir)/ $< -o tests/t303-$*-srvt.cc
MOSTLYCLEANFILES += $(tests_t303_generated)
tests/t303-mini-server-main.cc: $(tests_t303_generated)

# == t303-mini-server-test ==
t303-mini-server-test: tests/t303-mini-server
	$(Q) tests/t303-mini-server ; eval "$$TSTDIAGNOSE"
make_check_targets += t303-mini-server-test

# == t304-testpass-cxx-test ==
# test CxxStub Generation for Clinet & Server
tests/t304-testpass-cxx-server: tests/t301/testpass.idl tests/t304/testcxxserver.ref $(AIDACC_INTERN)
	$(Q) $(AIDACC_INTERN) -x CxxStub -G iface-prefix=I_ -G serverhh -G servercc -G aidaids -G strip-path=$(topdir)/ \
	  $(topdir)/tests/t301/testpass.idl -o $(TSTOUT) ; eval "$$TSTDIAGNOSE"
	$(Q) eval "$$TSTDIFF" tests/t304/testcxxserver.ref
tests/t304-testpass-cxx-client: tests/t301/testpass.idl tests/t304/testcxxclient.ref $(AIDACC_INTERN)
	$(Q) $(AIDACC_INTERN) -x CxxStub -G iface-prefix=I_ -G clienthh -G clientcc -G strip-path=$(topdir)/ \
	  $(topdir)/tests/t301/testpass.idl -o $(TSTOUT) ; eval "$$TSTDIAGNOSE"
	$(Q) eval "$$TSTDIFF" tests/t304/testcxxclient.ref
t304-testpass-cxx-test: tests/t304-testpass-cxx-server tests/t304-testpass-cxx-client
make_check_targets += t304-testpass-cxx-test

# == t305-testpass-compile-test ==
tests/t305-testpass-compile-server: tests/t301/testpass.idl $(AIDACC_INTERN) rcore/aidavariants.hh
	$(Q) $(AIDACC_INTERN) -x CxxStub -G iface-prefix=I_ -G serverhh -G servercc -G strip-path=$(topdir)/ \
	  $(topdir)/tests/t301/include-p2.idl -o tests/t305-include-p2-server.gen.cc
	$(Q) $(AIDACC_INTERN) -x CxxStub -G iface-prefix=I_ -G serverhh -G servercc -G strip-path=$(topdir)/ \
	  $(topdir)/tests/t301/include-p1.idl -o tests/t305-include-p1-server.gen.cc
	$(Q) $(AIDACC_INTERN) -x CxxStub -G iface-prefix=I_ -G serverhh -G servercc -G strip-path=$(topdir)/ \
	  $(topdir)/tests/t301/testpass.idl -o tests/t305-testpass-server.gen.cc
	$(Q) sed -i -e '1i#include "t305-include-p2-server.gen.cc"' \
		    -e '1i#include "t305-include-p1-server.gen.cc"' tests/t305-testpass-server.gen.cc
	$(Q) $(CXXCOMPILE) tests/t305-testpass-server.gen.cc -c ; eval "$$TSTDIAGNOSE"
MOSTLYCLEANFILES += tests/t305-include-p2-server.gen.cc tests/t305-include-p1-server.gen.cc tests/t305-testpass-server.gen.cc
tests/t305-testpass-compile-client: tests/t301/testpass.idl $(AIDACC_INTERN) rcore/aidavariants.hh
	$(Q) $(AIDACC_INTERN) -x CxxStub -G iface-prefix=I_ -G clienthh -G clientcc -G strip-path=$(topdir)/ \
	  $(topdir)/tests/t301/include-p2.idl -o tests/t305-include-p2-client.gen.cc
	$(Q) $(AIDACC_INTERN) -x CxxStub -G iface-prefix=I_ -G clienthh -G clientcc -G strip-path=$(topdir)/ \
	  $(topdir)/tests/t301/include-p1.idl -o tests/t305-include-p1-client.gen.cc
	$(Q) $(AIDACC_INTERN) -x CxxStub -G iface-prefix=I_ -G clienthh -G clientcc -G strip-path=$(topdir)/ \
	  $(topdir)/tests/t301/testpass.idl -o tests/t305-testpass-client.gen.cc
	$(Q) sed -i -e '1i#include "t305-include-p2-client.gen.cc"' \
		    -e '1i#include "t305-include-p1-client.gen.cc"' tests/t305-testpass-client.gen.cc
	$(Q) $(CXXCOMPILE) tests/t305-testpass-client.gen.cc -c ; eval "$$TSTDIAGNOSE"
MOSTLYCLEANFILES += tests/t305-include-p2-client.gen.cc tests/t305-include-p1-client.gen.cc tests/t305-testpass-client.gen.cc
t305-testpass-compile-test: tests/t305-testpass-compile-server tests/t305-testpass-compile-client
make_check_targets += t305-testpass-compile-test

# == t390-installcheck-aidacc ==
t390-installcheck-aidacc: tests/t301/testpass.idl
	$(Q) cd / \
	&& $(DESTDIR)$(bindir)/aidacc --list-formats | grep -q -i 'formats' \
	&& $(DESTDIR)$(bindir)/aidacc $(topdir)/tests/t301/testpass.idl ; eval "$$TSTDIAGNOSE"
.PHONY: t390-installcheck-aidacc
installcheck-local: t390-installcheck-aidacc

# == t401-servertests ==
noinst_PROGRAMS			       += tests/t401-servertests
tests_t401_servertests_CXXFLAGS		= $(AM_CXXFLAGS) $(LIBRAPICORN_CFLAGS)
tests_t401_servertests_LDADD		= ui/librapicorn-@MAJOR@.la $(LIBRAPICORN_LIBS) $(READLINELIBS)
tests_t401_servertests_SOURCES		=	\
	tests/t401/cmdtest.cc			\
	tests/t401/labelmarkup.cc		\
	tests/t401/primitives.cc		\
	tests/t401/properties.cc		\
	tests/t401/region.cc			\
	tests/t401/server.cc			\
	tests/t401/servertests.cc		\
	tests/t401/sinfextest.cc		\
	tests/t401/stores.cc			\
	tests/t401/testselector.cc		\
	tests/t401/testwidgets.cc		\
	tests/t401/widgets.cc
make_check_xml_files			+= tests/t401/factory.xml tests/t401/testwidgets.xml
tests/t401/labelmarkup.cc: tests/t201/rcore-basics-xmldata.cc

# == t401-servertests-test ==
t401-servertests-test: tests/t401-servertests
	$(Q) $(X11_ENV) $(TAPTOOL) --test-name t401-servertests -- tests/t401-servertests
make_check_targets += t401-servertests-test

# == t402-clienttests ==
noinst_PROGRAMS			       += tests/t402-clienttests
tests_t402_clienttests_LDADD		= ui/librapicorn-@MAJOR@.la $(RAPICORN_GUI_LIBS)
tests_t402_clienttests_SOURCES		=	\
	tests/t402/clienttests.cc		\
	tests/t402/pixmaps.cc

# == t402-clienttests-test ==
t402-clienttests-test: tests/t402-clienttests
	$(Q) $(TAPTOOL) --test-name t402-clienttests -- tests/t402-clienttests
make_check_targets += t402-clienttests-test

# == t403-sinfex-expression-test ==
SINFEX_SHELL				 = $(topdir)/tests/t401-servertests --shell
t403-sinfex-expression-test: tests/t403/expressions.ref tests/t403/expressions.txt tests/t401-servertests
	$(Q) egrep -v '^[[:space:]]*(#|$$)' < $(srcdir)/tests/t403/expressions.txt > $(TSTTMP)
	$(Q) $(X11_ENV) COLUMNS=9999 $(SINFEX_SHELL) < $(TSTTMP) > $(TSTOUT) ; eval "$$TSTDIAGNOSE"
	$(Q) eval "$$TSTDIFF" "'$(srcdir)/tests/t403/expressions.ref'" "'$(TSTOUT)'"
	$(Q) rm -f $(TSTTMP)
make_check_targets += t403-sinfex-expression-test

# == t5xx - python tests ==
make_check_pytests += \
	tests/t500-cython-core.py	\
	tests/t501-main-loop.py		\
	tests/t502-property-basics.py	\
	tests/t503-garbage-collector.py	\
	tests/t504-size-groups.py	\
	tests/t505-property-binding.py	\
	tests/t506-simple-click.py

# == t590-cython-installcheck-test ==
tests/t590-cython-installcheck-test: tests/t500-cython-core.py
	@ # Patch tests/t500-cython-core.py to use the installed versioned Rapicorn.so module
	$(Q) sed 's/.*@LINE_REWRITTEN_FOR_INSTALLCHECK@.*/import Rapicorn_@MAJOR@ as Rapicorn/' \
		 < $< > tests/t590-cython-installcheck.py && ! cmp -s $< tests/t590-cython-installcheck.py
	$(Q) PYTHONPATH="$(DESTDIR)$(cython_pymodulesdir)/..:$$PYTHONPATH" $(X11_ENV) $(PYTHON) tests/t590-cython-installcheck.py
	$(Q) rm -f tests/t590-cython-installcheck.py
.PHONY: tests/t590-cython-installcheck-test
installcheck-local: tests/t590-cython-installcheck-test

# == t600-xmlui-eval ==
make_check_xml_files += tests/t600-xmlui-eval.xml
t600-xmlui-eval-test: tests/t600-xmlui-eval.xml
	$(Q) $(XVFB_RAPIDRUN) -x $(srcdir)/tests/t600-xmlui-eval.xml ; eval "$$TSTDIAGNOSE"
make_check_targets += t600-xmlui-eval-test

# == t601-arrow-sizing ==
make_check_xml_files += tests/t601-arrow-sizing.xml
t601-arrow-sizing-test: tests/t601-arrow-sizing.xml
	$(Q) $(XVFB_RAPIDRUN) -x $(srcdir)/tests/t601-arrow-sizing.xml ; eval "$$TSTDIAGNOSE"
make_check_targets += t601-arrow-sizing-test

# == t602-factory-dump ==
make_check_xml_files	+= tests/t602-factory-dump.xml
t602-factory-dump-test: tests/t602-factory-dump.ref tests/t602-factory-dump.xml
	$(Q) $(XVFB_RAPIDRUN) -x --test-dump \
	  --test-matched-node=".*" $(top_srcdir)/tests/t602-factory-dump.xml > $(TSTOUT) ; eval "$$TSTDIAGNOSE"
	$(Q) eval "$$TSTDIFF" "'$(top_srcdir)/tests/t602-factory-dump.ref'" "'$(TSTOUT)'"
make_check_targets += t602-factory-dump-test

# == t700-png-image ==
make_check_xml_files	+= tests/t700-png-image.xml
t700-png-image-test: tests/t700-png-image.xml tests/t700-png-image.png $(IMGCHECK)
	$(Q) rm -f tests/t700-png-image-snap.png
	$(Q) test $(srcdir) = $(builddir) || cp $(srcdir)/tests/t700-png-image.png $(builddir)/tests
	$(Q) export RAPIDRUN_RES=$(topdir)/tests/ && cd tests/ && $(XVFB_RAPIDRUN) -x $(topdir)/tests/t700-png-image.xml
	$(Q) test $(srcdir) = $(builddir) || rm -f $(builddir)/tests/t700-png-image.png
	$(Q) $(IMGCHECK) $(srcdir)/tests/t700-png-image.png tests/t700-png-image-snap.png ; eval "$$TSTDIAGNOSE"
	$(Q) rm -f tests/t700-png-image-snap.png
make_check_targets += t700-png-image-test

# == t701-alignment-layout ==
make_check_xml_files	+= tests/t701-alignment-layout.xml
t701-alignment-layout-test: tests/t701-alignment-layout.xml tests/t701-alignment-layout.png $(IMGCHECK)
	$(Q) rm -f tests/t701-alignment-layout-snap.png
	$(Q) cd tests/ && $(XVFB_RAPIDRUN) -x $(topdir)/%D%/t701-alignment-layout.xml
	$(Q) $(IMGCHECK) $(topdir)/%D%/t701-alignment-layout.png tests/t701-alignment-layout-snap.png ; eval "$$TSTDIAGNOSE"
	$(Q) rm -f tests/t701-alignment-layout-snap.png
make_check_targets += t701-alignment-layout-test

# == t702-text-ocr ==
make_check_xml_files	+= tests/t702-text-ocr.xml
t702-text-ocr-test: tests/t702-text-ocr.xml
	$(Q) rm -f tests/t702-text-ocr-snap.png
	$(Q) cd tests/ && $(XVFB_RAPIDRUN) --snapshot=t702-text-ocr-snap.png -x $(topdir)/%D%/t702-text-ocr.xml $(QSTDERR)
	$(Q) eval "$$TSTOCR" tests/t702-text-ocr-snap.png "Regu.ar.Text" \""Insensitive Text"\" \""Editab.e Text Edit.r Text"\"
	$(Q) rm -f tests/t702-text-ocr-snap.png
make_check_targets += t702-text-ocr-test

# == t8xx - documentation tests ==
make_check_pytests += \
	tests/t800-binding-example.py

# == t901-bench-rcore ==
noinst_PROGRAMS				+= tests/t901-bench-rcore
tests_t901_bench_rcore_LDADD		 = ui/librapicorn-@MAJOR@.la
tests_t901_bench_rcore_SOURCES		 = \
	tests/t901-bench-rcore-main.cc
t901-bench-rcore-test: tests/t901-bench-rcore
	$(Q) cd tests && $(TAPTOOL) --test-name t901-bench-rcore -- ./t901-bench-rcore
make_check_targets += t901-bench-rcore-test

# == t902-bench-aida ==
noinst_PROGRAMS 			+= tests/t902-bench-aida
tests_t902_bench_aida_LDADD		 = ui/librapicorn-@MAJOR@.la
tests_t902_bench_aida_SOURCES		 = \
	tests/t902-bench-aida-main.cc
t902-bench-aida-test: tests/t902-bench-aida
	$(Q) tests/t902-bench-aida ; eval "$$TSTDIAGNOSE"
make_check_targets += t902-bench-aida-test
