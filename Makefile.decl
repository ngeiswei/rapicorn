# Rapicorn						-*-mode:makefile;-*-
# This Source Code Form is licensed MPL-2.0: http://mozilla.org/MPL/2.0

# declare variables that we might want to use += on.
EXTRA_HEADERS=
MAINTAINERCLEANFILES=$(GENERATED)
CLEANFILES=$(GENERATED_CLEANFILES)
GENERATED_EXTRA_DIST=
GENERATED_CLEANFILES=
GENERATED=$(strip $(GENERATED_EXTRA_DIST) $(GENERATED_CLEANFILES))
EXTRA_DIST=$(GENERATED_EXTRA_DIST)

# == Verbosity ==
Q       = $(if $(findstring 1, $(V)) ,, @)
QGEN    = $(Q:@=@echo '  GEN   ' $@; )
QSTDERR = $(Q:@=2>/dev/null)
QSTDOUT = $(Q:@=1>/dev/null)

# == GITSTAMPS ==
# list of stamp files touched by commits
GITSTAMPS = $(shell test -e "$${GIT_DIR:-.git}" && ls 2>/dev/null \
		"$${GIT_DIR:-.git}/`git symbolic-ref -q HEAD || echo HEAD`" \
		"$${GIT_DIR:-.git}/packed-refs" "$${GIT_DIR:-.git}/HEAD")

# == Download ==
# recursive rule supported by all Makefiles to download files hosted online
.PHONY: download download-recursive download-local
download: download-local download-recursive
download-recursive:
	$(Q) for subdir in $(SUBDIRS) ; do test "$$subdir" = '.' || $(MAKE) -C "$$subdir" $(AM_MAKEFLAGS) download || exit $$? ; done

# == Install Helpers ==
# $(call SYMLINK_LATEST, GLOB, LINKNAME) - create symbolic link to latest versioned file
SYMLINK_LATEST = ( L=`/bin/ls -d $(1) 2>/dev/null | sort -r | head -1` ; if test -n "$$L" ; \
		   then echo "  RELINK" $(2) && rm -f $(2) && ln -s "$$L" $(2) ; \
		   else echo "  UNLINK" $(2) && rm -f $(2) ; fi )

# == Doc Helpers ==
local-ETAGS:
	ctags -e --c++-kinds=+p --fields=+iaS --extra=+q -a -f $(top_builddir)/ETAGS $(am__tagged_files)
.PHONY: local-ETAGS

# == X11 for Unit Tests ==
# Provide X11_ENV to execute commands within an X11 context. There are 3 possible cases here:
# - DISPLAY is unset, no X11 server is running yet, we need to proivde Xvfb;
# - DISPLAY is set because we're already running with an Xvfb instance, usually the display number is >= 99;
# - DISPLAY is set by a normal login session, we assume the display number is < 99 in this case,
#   and in order to not disturb the existing session, we need to start Xvfb.
XVFB_MISSING = $(shell test `echo $${DISPLAY:-:0} | sed 's/^[^:]*:\([0-9]\+\).*/\1/'` -ge 99 || echo missingxvfb)
X11_ENV = $(if $(XVFB_MISSING), xvfb-run -a -s "-screen 0 800x600x24") /usr/bin/env

# === distfile-list ===
# recursive rule supported by all Makefiles to generate a list of all files
# listed as DISTFILES. this asserts a writable file named $DISTFILE_LIST.
.PHONY: distfile-list
distfile-list:
	@if test ! -f "$(DISTFILE_LIST)" ; then				\
		echo 'distfile-list: $$(DISTFILE_LIST) is unwritable' ;	\
		exit 1 ;						\
	fi
	@for subdir in $(SUBDIRS) ; do				\
	  test "$$subdir" = '.' ||				\
	    $(MAKE) -C "$$subdir" $(AM_MAKEFLAGS) $@ ||		\
	    exit 1 ;						\
	done
	for file in $(DISTFILES) ; do				\
	  test -e "$$file" &&					\
	    echo "$(subdir)/$$file" >> $(DISTFILE_LIST) ;	\
	done ; true

# == TAPTESTS ==
# tests run through taptool.sh
TAPTESTS =
TAPRUNS  = $(addsuffix .taprun, $(basename $(TAPTESTS)))
.PHONY: taptests $(TAPRUNS)
taptests: $(top_srcdir)/taptool.sh
	@$(MAKE) $(AM_MAKEFLAGS) --no-print-directory $(TAPRUNS)
$(TAPRUNS): %.taprun: % # static pattern rule - also works for phony targets
	$(Q) test "$@" = "$(@F)" || { echo "$@: test program outside CWD" >&2; exit 1; }
	$(Q) TST="$(@:%.taprun=%)"; $(top_srcdir)/taptool.sh --test-name "$$TST" -- ./"$$TST"
check-local: taptests

# == X11TESTS ==
X11TESTS =
X11RUNS  = $(addsuffix .x11run, $(basename $(X11TESTS)))
.PHONY: x11tests $(X11RUNS)
x11tests: $(top_srcdir)/taptool.sh
	@$(MAKE) $(AM_MAKEFLAGS) --no-print-directory $(X11RUNS)
$(X11RUNS): %.x11run: % # static pattern rule - also works for phony targets
	$(Q) test "$@" = "$(@F)" || { echo "$@: test program outside CWD" >&2; exit 1; }
	$(Q) TST="$(@:%.x11run=%)"; $(X11_ENV) $(top_srcdir)/taptool.sh --test-name "$$TST" -- ./"$$TST"
check-local: x11tests

# === ALLTESTS ===
ALLTESTS = $(TAPTESTS) $(X11TESTS) $(TESTS) # used in noinst_PROGRAMS

# === Test-rule macros ===
FORCECHECKUPDATE = false
TSTRESULT = $(strip _e=$$?; \
  tstresult() { \
    local result="PASSFAIL" M="$$*"; \
    printf ' %-9s %s\n' " $${result:$$(($$_e?4:0)):4}" "$${M:-$(@F)}"; \
    test $$_e = 0 || exit $$_e; }; \
  tstresult \
)
export MAKE_TARGET      = $@
export MAKE_TARGET_FILE = $(@F)
export MAKE_TARGET_DIR  = $(@D)
export FAILOK           = FAIL  OK
### eval $$TSTDIAGNOSE ['TESTNAME'] - show test title and result atomically
export TSTDIAGNOSE = _e=$$?; tstdiagnose() { printf '  CHECK  %-64s%s\n' "$${1:-$$MAKE_TARGET_FILE}:" \
				"$${FAILOK:$$(($$_e?0:6)):6}"; [ $$_e = 0 ] || exit $$_e; }; tstdiagnose
### eval $$TSTDIFF ['TESTREF'] ['TESTLOG'] ['TESTNAME']
export TSTDIFF = tstverify() { \
	${FORCECHECKUPDATE} && { cp $(if $(Q),,-v) $${2:-$(TSTOUT)} $${1:-$(TSTREF)} ; FAILOK="FAIL "" FORCED" ; } ; \
	cmp --quiet $${1:-$(TSTREF)} $${2:-$(TSTOUT)} ; _e=$$? ; \
	printf '  DIFF   %-64s%s\n' "$${3:-$$MAKE_TARGET_FILE}:" "$${FAILOK:$$(($$_e?0:6)):6}" ; \
	test $$_e = 0 || { diff -up $${1:-$(TSTREF)} $${2:-$(TSTOUT)} ; exit $$_e ; } ; rm -f $${2:-$(TSTOUT)} ; \
} ; tstverify
### eval $$TSTOCR 'PNGFILE' [REGEXPATTERNS...] - OCR-grep a PNG file for regular expressions
export TSTOCR = tstocr() { IMG="$$1"; OUT=`basename "$$1".tocr`; shift; \
  gocr "$$IMG" > "$$OUT" 2>/dev/null && while [ -n "$$1" ] ; do \
  $(if $(findstring 1, $(V)), echo OCR: ; cat "$$OUT" ; ,) \
  grep -qE -e "$$1" "$$OUT" ; _e=$$? ; \
  printf '  CHECK  %-64s%s\n' "$$MAKE_TARGET_FILE: $$1" "$${FAILOK:$$(($$_e?0:6)):6}" ; [ $$_e = 0 ] || exit $$_e ; \
  shift ; done || \
  printf '  CHECK  %-64s%s\n' "$$MAKE_TARGET_FILE: OCR tests with gocr(1)..." "SKIP" ; \
  rm -f "$$OUT" ; }; tstocr
# $(call TSTOUT, [prefix]) - test output filename
TSTOUT = $(strip $(@D)/xtst$(strip $(1))-$(@F).out)
# $(call TSTTMP, [prefix]) - temporary test filename
TSTTMP = $(strip $(@D)/xtst$(strip $(1))-$(@F).tmp)

# === force-check-update ===
force-check-update:
	$(MAKE) FORCECHECKUPDATE=true check


# === report ===
.PHONY: report
report: all
	@export   REPORTFILE="$(REPORTFILE)" && [ -z "$$REPORTFILE" ]		\
	&& export REPORTFILE="$(shell pwd)/report.out"				\
	; (  echo -n    "#TSTREPORT: install: "	     && date --iso-8601=seconds	\
	  && $(MAKE) $(AM_MAKEFLAGS) install 					\
	  && echo -n    "#TSTREPORT: check: "	     && date --iso-8601=seconds	\
	  && $(MAKE) $(AM_MAKEFLAGS) check 					\
	  && echo -n    "#TSTREPORT: installcheck: " && date --iso-8601=seconds	\
	  && $(MAKE) $(AM_MAKEFLAGS) installcheck				\
	  && echo -n    "#TSTREPORT: done: "	     && date --iso-8601=seconds	\
	) 2>&1 | tee "$$REPORTFILE"
